{"version":3,"sources":["components/random-character/random-character.js","components/character-card/character-card.js","components/characters-list/characters-list.js","components/character-details/character-details.js","components/character-search-form/character-search-form.js","static/img/bottom_bg.png","components/pages/characters-page.js","components/error-view/error-view.js","hooks/http.hook.js","services/api-key.js","services/marvel-api-service.js","components/error-boundary/error-boundary.js","components/skeleton/skeleton.js","utils/setContent.js"],"names":["CharacterView","character","name","thumbnail","description","homepage","wiki","imageClassNames","shortDescription","length","slice","className","src","alt","href","RandomCharacter","useMarvelAPIService","process","setProcess","getCharacter","clearError","useState","setCharacter","useEffect","getRandomCharacter","onCharacterLoaded","minId","randomId","Math","floor","random","then","content","setContent","onClick","CharacterCard","props","id","image","onCharacterCardSelected","classNames","active","tabIndex","onKeyPress","e","key","CharactersList","activeCharacterCard","marvelService","baseOffset","_baseCharactersOffset","charactersPerLoad","_baseCharactersLimit","getAllCharacters","characters","setCharacters","charactersEnded","setCharactersEnded","offset","setOffset","onLoadCharacters","onCharactersLoaded","newCharacters","ended","useMemo","setListContent","activeCardId","map","mapToCharacterCards","disabled","style","CharacterDetailsView","CharacterComicsView","characterComics","comics","to","CharacterDetailsWholeView","CharacterDetails","characterId","characterInfoRef","useRef","getCharacterComics","setCharacterComics","getCharacterDetails","onCharacterSelected","clientCoords","current","getBoundingClientRect","scrollTop","window","scrollY","top","scrollTo","onCharacterComicsLoaded","ref","CharacterSearchForm","getCharacterByName","onCharacterFound","initialValues","validationSchema","yup","required","onSubmit","values","type","placeholder","component","CharactersPage","setActiveCharacterCard","Helmet","vision","ErrorView","errorMessage","flex","ErrorIcon","viewBox","y","x","xmlns","version","height","width","background","transformOrigin","transform","fill","d","attributeName","dur","repeatCount","keyTimes","begin","defaultProps","useHttp","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","publicApiKey","_apiBase","_apiKeyBase","_apiUrls","results","_transformCharacterData","toString","characterMainData","getAllComics","_transformComicsData","getSingleComics","comicsMainData","noDescriptionMessage","path","extension","urls","price","prices","pages","pageCount","title","language","textObjects","_baseComicsLimit","ErrorBoundary","state","error","errorInfo","this","setState","message","children","Component","Skeleton"],"mappings":"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","file":"static/js/4.71e03b66.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\r\n\r\nimport useMarvelAPIService from '../../services/marvel-api-service';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport '../../button.scss';\r\nimport './random-character.scss';\r\n\r\nconst RandomCharacter = () => {\r\n    /* Initializing instances to communicate with Marvel API and work with 'loaded' and 'error' states */\r\n    const {process, setProcess, getCharacter, clearError} = useMarvelAPIService();\r\n\r\n    /* Component states */\r\n    const [character, setCharacter] = useState(null);\r\n\r\n    /* Component logic */\r\n\r\n    useEffect(() => {\r\n        /* Getting random character on opening the app */\r\n        getRandomCharacter();\r\n    }, []);\r\n\r\n    const onCharacterLoaded = (character) => {\r\n        /**\r\n         * Saves character data to state\r\n         * of this component.\r\n         */\r\n        setCharacter(character);\r\n    }\r\n\r\n    const getRandomCharacter = () => {\r\n        /**\r\n         * Gets data (object) from Marvel API on random character\r\n         * and saves it to the state of this component.\r\n         */\r\n        clearError();\r\n        setCharacter(null);\r\n\r\n        const maxId = 1011400;\r\n        const minId = 1011000;\r\n        const randomId = Math.floor(minId + Math.random() * (maxId - minId));\r\n\r\n        getCharacter(randomId)\r\n            .then(onCharacterLoaded)\r\n            .then(() => setProcess('success'));\r\n    }\r\n\r\n    const content = setContent(process, character, CharacterView);\r\n\r\n    return (\r\n        <section className=\"random-section\">\r\n\r\n            <div className=\"random-character\">\r\n                {content}\r\n            </div>\r\n\r\n            <div className=\"random-choose\">\r\n                <p className=\"random-choose__text\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n\r\n                <div>\r\n                    <p className=\"random-choose__text random-choose__text_margined\">Or choose another one</p>\r\n                    <button \r\n                        className=\"app-button app-button_main app-button_on-dark-bg\"\r\n                        onClick={getRandomCharacter}>\r\n                            Try It\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        \r\n        </section>\r\n        \r\n    );\r\n}\r\n\r\n\r\nconst CharacterView = ({character}) => {\r\n    if (!character) {\r\n        return null;\r\n    }\r\n\r\n    const {name, thumbnail, description, homepage, wiki} = character;\r\n\r\n    /* Change styles for a \"not found\" image */\r\n    const imageNotFound = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\";\r\n    let imageClassNames = \"random-character__image\";\r\n    if (thumbnail === imageNotFound) {\r\n        imageClassNames += \" random-character__image_contain\";\r\n    }\r\n\r\n    /* Shorten long desription */\r\n    let shortDescription = description;\r\n    if (description.length >= 235) {\r\n        shortDescription = description.slice(0, 235) + \"...\";\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={imageClassNames}>\r\n                <img src={thumbnail} alt=\"random character\" />\r\n            </div>\r\n\r\n            <div className=\"random-character__details\">\r\n                <h3 className=\"random-character__name\">\r\n                    {name}\r\n                </h3>\r\n                <p className=\"random-character__descr\">\r\n                    {shortDescription}\r\n                </p>\r\n                <div className=\"random-character__links\">\r\n                    <a href={homepage} className=\"app-button app-button_main\">Homepage</a>\r\n                    <a href={wiki} className=\"app-button\">Wiki</a>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default RandomCharacter;","import PropTypes from 'prop-types';\r\n\r\nimport './character-card.scss';\r\n\r\nconst CharacterCard = (props) => {\r\n    const {id, image, name, onCharacterCardSelected, active} = props;\r\n\r\n    /* Change styles for a \"not found\" image */\r\n    const imageNotFound = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\";\r\n    let imageClassNames = \"character-card__image\";\r\n    if (image === imageNotFound) {\r\n        imageClassNames += \" character-card__image_contain\";\r\n    }\r\n\r\n    /* Change styles for selected card */\r\n    let classNames = active ? 'character-card character-card_active' : 'character-card';\r\n\r\n    return (\r\n        <li \r\n            className={classNames}\r\n            tabIndex=\"0\"\r\n            onClick={() => onCharacterCardSelected(id)}\r\n            onKeyPress={(e) => {\r\n                if (e.key === ' ' || e.key === \"Enter\") {\r\n                    onCharacterCardSelected(id);\r\n                }\r\n            }}\r\n        >\r\n                <div className={imageClassNames}>\r\n                    <img src={image} alt=\"Comics Character Portrait\" />\r\n                </div>\r\n    \r\n                <div className=\"character-card__details\">\r\n                    <h3 className=\"character-card__name\">{name}</h3>\r\n                </div>\r\n        </li>\r\n    );\r\n}\r\n\r\nCharacterCard.propTypes = {\r\n    active: PropTypes.bool,\r\n    onCharacterCardSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharacterCard;","import {useState, useEffect, useMemo} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelAPIService from '../../services/marvel-api-service';\r\nimport { setListContent } from '../../utils/setContent';\r\n\r\nimport CharacterCard from '../character-card/character-card';\r\n\r\nimport './characters-list.scss';\r\n\r\n\r\nconst mapToCharacterCards = (characters, activeCardId, onCharacterCardSelected) => {\r\n    /**\r\n     * Helper function for CharatersList component.\r\n     * Receives array with characters data\r\n     * and maps it to CharacterCard elements.\r\n     */\r\n    if (!characters) {\r\n        return null;\r\n    }\r\n\r\n    /* Mapping characters to CharacterCard components */\r\n    return characters.map( ({id, name, thumbnail}) => {\r\n        let active = id === activeCardId;\r\n        return <CharacterCard \r\n                    key={id} \r\n                    id={id}\r\n                    name={name} \r\n                    image={thumbnail}\r\n                    onCharacterCardSelected={onCharacterCardSelected}\r\n                    active={active}\r\n                />;\r\n    });\r\n}\r\n\r\n\r\nconst CharactersList = (props) => {\r\n    const {onCharacterCardSelected, activeCharacterCard} = props;\r\n    /* Initializing instances to communicate with Marvel API */\r\n    const marvelService = useMarvelAPIService();\r\n    const baseOffset = marvelService._baseCharactersOffset;\r\n    const charactersPerLoad = marvelService._baseCharactersLimit;\r\n    const {process, setProcess, clearError, getAllCharacters} = marvelService;\r\n    /* Component states */\r\n    const [characters, setCharacters] = useState([]);\r\n    const [charactersEnded, setCharactersEnded] = useState(false);\r\n    const [offset, setOffset] = useState(baseOffset);\r\n\r\n    /* Component logic */\r\n    useEffect(() => {\r\n        onLoadCharacters();\r\n    }, []);\r\n\r\n    const onCharactersLoaded = (newCharacters) => {\r\n        /**\r\n         * Saves newly uploaded characters data \r\n         * to the state of this component.\r\n         * And updates offset for following uploads.\r\n         */ \r\n\r\n        /* No \"load more\" button if characters ended */\r\n        let ended = false;\r\n        if (newCharacters.length < charactersPerLoad) {\r\n            ended = true;\r\n        }\r\n        \r\n        setCharacters(characters => [...characters, ...newCharacters]);\r\n        setCharactersEnded(ended);\r\n        setOffset(offset => offset + charactersPerLoad);       \r\n    }\r\n\r\n    const onLoadCharacters = (offset) => {\r\n        /**\r\n         * Gets data (array) from Marvel API on additional\r\n         * 9 characters and saves it to the state \r\n         * of this component.\r\n         */\r\n        clearError();\r\n\r\n        getAllCharacters(offset)\r\n            .then(onCharactersLoaded)\r\n            .then(() => setProcess('success'));\r\n    }\r\n\r\n    /* Rendering */\r\n    const content = useMemo(() => {\r\n        return setListContent(process, () => mapToCharacterCards(characters, activeCharacterCard, onCharacterCardSelected));\r\n    }, [process]);\r\n\r\n    return (\r\n        <div className=\"characters-section\">\r\n            <ul className=\"characters-section__list\">\r\n                {content}\r\n            </ul>\r\n\r\n            <button \r\n                className=\"app-button app-button_main app-button_wide\"\r\n                disabled={process === \"loading\"}\r\n                style={{'display': charactersEnded ? 'none' : 'block'}}\r\n                onClick={() => onLoadCharacters(offset)}\r\n                >\r\n                    Load More\r\n            </button>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\n\r\nCharactersList.propTypes = {\r\n    activeCharacterCard: PropTypes.number,\r\n    onCharacterCardSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharactersList;","import {useState, useEffect, useRef} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelAPIService from '../../services/marvel-api-service';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './character-details.scss';\r\n\r\n\r\nconst CharacterDetails = (props) => {\r\n    const {characterId} = props;\r\n\r\n    /* Ref for correct scrolling to character details component */\r\n    const characterInfoRef = useRef(null);\r\n\r\n    /* Initializing instances to communicate with Marvel API and work with its states */\r\n    const {process, setProcess, getCharacter, getCharacterComics, clearError} = useMarvelAPIService();\r\n\r\n    /* Component states */\r\n    const [character, setCharacter] = useState(null);\r\n    const [characterComics, setCharacterComics] = useState([]);\r\n\r\n    /* Component logic */\r\n\r\n    useEffect(() => {\r\n        getCharacterDetails(characterId);\r\n        onCharacterSelected();\r\n    }, [characterId]);\r\n\r\n    const onCharacterSelected = () => {\r\n        /**\r\n         * Smoothly scrolls page to character info element\r\n         * on selection of character card.\r\n         */\r\n        let clientCoords = characterInfoRef.current.getBoundingClientRect();\r\n        let scrollTop = window.scrollY + clientCoords.top;\r\n        window.scrollTo(0, scrollTop);\r\n    }\r\n\r\n    const onCharacterLoaded = (character) => {\r\n        /**\r\n         * Saves character data to state\r\n         * of this component.\r\n         */\r\n        setCharacter(character);\r\n    }\r\n\r\n    const onCharacterComicsLoaded = (comics) => {\r\n        /**\r\n         * Saves character data to state\r\n         * of this component.\r\n         */\r\n        setCharacterComics(comics);\r\n    }\r\n\r\n    const getCharacterDetails = (id) => {\r\n        /**\r\n         * Gets data (object) from Marvel API on selected character\r\n         * and comics mentioning him \r\n         * and saves it to the state of this component.\r\n         */\r\n        if (!id) {\r\n            return;\r\n        }\r\n\r\n        clearError();\r\n        setCharacter(null);\r\n        setCharacterComics([]);\r\n        getCharacter(id)\r\n            .then(onCharacterLoaded)\r\n            .then(() => getCharacterComics(id))\r\n            .then(onCharacterComicsLoaded)\r\n            .then(() => setProcess('success'));\r\n    }\r\n\r\n    const content = setContent(process, character, CharacterDetailsWholeView, characterComics);\r\n\r\n    return (\r\n        <div className=\"character-info\" ref={characterInfoRef}>\r\n            {content}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nconst CharacterDetailsView = ({character}) => {\r\n    /**\r\n     * Returns element with character details\r\n     * or null.\r\n     */    \r\n    if (!character) {\r\n        return null;\r\n    }\r\n\r\n    const {name, thumbnail, description, homepage, wiki} = character;\r\n\r\n    /* Change styles for a \"not found\" image */\r\n    const imageNotFound = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\";\r\n    let imageClassNames = \"character-info__image\";\r\n    if (thumbnail === imageNotFound) {\r\n        imageClassNames += \" character-info__image_contain\";\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"character-info__header\">\r\n                    <div className={imageClassNames}>\r\n                        <img src={thumbnail} alt=\"Character Portrait\"/>\r\n                    </div>\r\n    \r\n                    <div className=\"character-info__main\">\r\n                        <h3 className=\"character-info__name\">{name}</h3>\r\n    \r\n                        <div className=\"character-info__links\">\r\n                            <a href={homepage} className=\"app-button app-button_main app-button_mb10\">Homepage</a>\r\n                            <a href={wiki} className=\"app-button\">Wiki</a>\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n    \r\n            <article className=\"character-info__bio\">\r\n                {description}\r\n            </article>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst CharacterComicsView = ({characterComics}) => {\r\n    if (!characterComics || characterComics.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    const comics = characterComics.map(({id, name, thumbnail}) => {\r\n        return (\r\n            <li key={id} className=\"character-info__single-comics\">\r\n                <Link to={`/marvel-wiki-portal/comics/${id}`} className=\"character-info__single-comics_on-hover\">\r\n                    <h6>{name}</h6>\r\n                    <div>\r\n                        <img src={thumbnail} alt={`Cover of ${name} comics`}/>\r\n                    </div>\r\n                </Link>\r\n            </li>\r\n        );\r\n    });\r\n\r\n    return <><h5>Comics:</h5> {comics}</>;\r\n}\r\n\r\n\r\nconst CharacterDetailsWholeView = ({character, characterComics}) => {\r\n    return (\r\n        <>\r\n            <CharacterDetailsView character={character} />\r\n            <ul className=\"character-info__comics\">\r\n                <CharacterComicsView characterComics={characterComics}/>\r\n            </ul>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nCharacterDetails.propTypes = {\r\n    characterId: PropTypes.number\r\n}\r\n\r\nexport default CharacterDetails;","import { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as yup from 'yup';\r\n\r\nimport {useState, useEffect} from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelAPIService from '../../services/marvel-api-service';\r\n\r\nimport Spinner from '../spinner/spinner';\r\nimport ErrorView from '../error-view/error-view';\r\n\r\nimport './character-search-form.scss';\r\n\r\nconst CharacterSearchForm = () => {\r\n    const {process, setProcess, getCharacterByName, clearError} = useMarvelAPIService();\r\n\r\n    const [character, setCharacter] = useState({});\r\n\r\n    useEffect(() => {\r\n        setProcess('success');\r\n    }, []);\r\n\r\n    const onCharacterFound = (character) => {\r\n        /**\r\n         * Saves character data to state\r\n         * of this component.\r\n         */\r\n        setCharacter(character);\r\n    }\r\n\r\n    const getCharacterData = (name) => {\r\n        /**\r\n         * Gets data (object) from Marvel API on character\r\n         * by its name \r\n         * and saves it to the state of this component.\r\n         */\r\n        clearError();\r\n        setCharacter({});\r\n\r\n        getCharacterByName(name)\r\n        .then(onCharacterFound)\r\n        .then(() => setProcess('success'));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Formik\r\n                initialValues={{name: \"\"}}\r\n                validationSchema={yup.object({\r\n                    name: yup.string()\r\n                            .required('This field is required'),\r\n                })}\r\n                onSubmit={values => getCharacterData(values.name)}>\r\n                <Form className=\"form\">\r\n                    <h5 className=\"form__header\">Or find a character by name:</h5>\r\n                    <div className=\"form__main\">\r\n                        \r\n                        <Field \r\n                            id=\"name\"\r\n                            name=\"name\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter name\"\r\n                            className=\"form__input\"\r\n                        />\r\n                        <button \r\n                            type=\"submit\" \r\n                            className=\"app-button app-button_main\"\r\n                            disabled={process === \"loading\"}\r\n                            >\r\n                                Find\r\n                        </button>\r\n                        \r\n                    </div>\r\n                    \r\n                    <div className=\"form__result\">\r\n                        <ErrorMessage name=\"name\" component=\"div\" className=\"form__error\"/>\r\n                        {\r\n                            !character ? \r\n                                <div className=\"form__error\">The character was not found. Please, check the name and try again.</div> \r\n                                : null\r\n                        }\r\n                        {\r\n                            character?.id ? \r\n                                <>\r\n                                    <div className=\"form__success\">Found! Click to visit {character.name}'s page.</div>\r\n                                    <Link to={`/marvel-wiki-portal/characters/${character.id}`} className=\"app-button\">To Page</Link>\r\n                                </> \r\n                                : null\r\n                        }\r\n                    </div>\r\n                    <Spinner process={process}/>\r\n                    <ErrorView process={process}/>\r\n                </Form>\r\n            </Formik>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default CharacterSearchForm;","export default __webpack_public_path__ + \"static/media/bottom_bg.4d6f9671.png\";","import { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport RandomCharacter from '../random-character/random-character';\r\nimport CharactersList from '../characters-list/characters-list';\r\nimport CharacterDetails from '../character-details/character-details';\r\nimport CharacterSearchForm from '../character-search-form/character-search-form';\r\nimport ErrorBoundary from '../error-boundary/error-boundary';\r\n\r\nimport vision from '../../static/img/bottom_bg.png';\r\n\r\nconst CharactersPage = () => {\r\n    const [activeCharacterCard, setActiveCharacterCard] = useState(null);\r\n\r\n    const onCharacterCardSelected = (id) => {\r\n        setActiveCharacterCard(id);\r\n    }\r\n\r\n    return (\r\n        <>  \r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel Wiki Portal - Characters\"\r\n                    />\r\n                <title>Marvel Wiki Portal - Characters</title>\r\n            </Helmet>\r\n\r\n            <ErrorBoundary>\r\n                <RandomCharacter />\r\n            </ErrorBoundary>\r\n            \r\n            <div className=\"characters-container\">\r\n                <ErrorBoundary>\r\n                    <CharactersList \r\n                        activeCharacterCard={activeCharacterCard} \r\n                        onCharacterCardSelected={onCharacterCardSelected}\r\n                    />\r\n                </ErrorBoundary>\r\n                \r\n                <div className=\"character-details-container\">\r\n                    <ErrorBoundary>\r\n                        <CharacterDetails characterId={activeCharacterCard}/>\r\n                    </ErrorBoundary>\r\n\r\n                    <ErrorBoundary>\r\n                        <CharacterSearchForm />\r\n                    </ErrorBoundary>\r\n                </div>\r\n                \r\n            </div>\r\n\r\n            <div className=\"bg-decoration\">\r\n                <img \r\n                    src={vision} \r\n                    alt=\"Vision Character in Attacking Pose\" \r\n                    className=\"bg-decoration__image\"\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CharactersPage;","import PropTypes from 'prop-types';\r\n\r\nimport './error-view.scss';\r\n\r\nconst ErrorView = ({process, errorMessage, flex}) => {\r\n    if (process !== \"failure\") {\r\n        return null;\r\n    }\r\n\r\n    let className;\r\n    switch(flex) {\r\n        case \"column\":\r\n            className = \"error-view error-view_columned\";\r\n            break;\r\n        case \"row\":\r\n            className = \"error-view error-view_rowed\";\r\n            break;\r\n        default:\r\n            className = \"error-view\";\r\n    }\r\n\r\n    return (\r\n        <div className={className}>\r\n            <ErrorIcon />\r\n            <p className=\"error-view__message\">{errorMessage}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst ErrorIcon = () => {\r\n    return (\r\n        <svg \r\n            viewBox=\"0 0 100 100\" \r\n            y=\"0\" \r\n            x=\"0\" \r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            version=\"1.1\" \r\n            style={{height: '150px', width: '150px', background: 'none'}} \r\n            width=\"150px\" \r\n            height=\"150px\">\r\n                <g className=\"ldl-scale\" \r\n                    style={{transformOrigin: '50% 50%', transform: 'scale(0.8, 0.8)'}}>\r\n                <g className=\"ldl-ani\">\r\n                <g className=\"ldl-layer\">\r\n                <g className=\"ldl-ani\" \r\n                    style={{transformOrigin: '50px 50px', transform: 'scale(0.91)'}}>\r\n                    <path fill=\"#e15b64\" d=\"M14.653 85.487c-3.138-1.806-4.167-6.008-2.198-9.12 8.401-13.282 18.34-25.329 29.177-36.099 10.916-10.864 22.708-20.49 34.913-29.273 2.772-1.995 6.57-1.344 8.557 1.485 1.928 2.744 1.471 6.578-1.06 8.732-11.111 9.456-21.591 19.558-30.95 30.517C43.876 62.5 35.786 74.12 29.248 86.488c-1.653 3.126-5.423 4.276-8.429 2.547l-6.166-3.548z\" style={{fill: 'rgb(159, 0, 19)'}}>\r\n                    <animateTransform attributeName=\"transform\" type=\"scale\" dur=\"2s\" repeatCount=\"indefinite\" keyTimes=\"0; 0.5; 1\" values=\"0.8 0.8; 1 1; 0.8 0.8\"></animateTransform>\r\n                    </path>\r\n                </g></g>\r\n                <g className=\"ldl-layer\">\r\n                <g className=\"ldl-ani\" \r\n                    style={{transformOrigin: '50px 50px', transform: 'scale(0.91)'}}>\r\n                    <path fill=\"#e15b64\" d=\"M78.739 82.438c-3.067 1.804-7.041.872-8.916-2.152-6.367-10.267-14.543-19.718-23.698-28.397-9.306-8.827-19.587-16.906-30.29-24.594a6.594 6.594 0 0 1-1.682-8.948l1.23-1.895a6.609 6.609 0 0 1 9.03-2.012c11.571 7.19 22.962 14.943 33.735 23.864 10.673 8.851 20.777 18.958 29.162 30.721 2.256 3.165 1.337 7.584-2.014 9.555l-6.557 3.858z\" style={{fill: 'rgb(159, 0, 19)'}}>\r\n                    <animateTransform attributeName=\"transform\" type=\"scale\" dur=\"2s\" begin=\"0.5s\" repeatCount=\"indefinite\" keyTimes=\"0; 0.5; 1\" values=\"1 1; 0.8 0.8; 1 1\"></animateTransform>\r\n                    </path>\r\n                </g></g>\r\n                </g></g>\r\n        </svg>\r\n    );\r\n}\r\n\r\nErrorView.propTypes = {\r\n    process: PropTypes.string,\r\n    errorMessage: PropTypes.string,\r\n    flex: PropTypes.oneOf(['column', 'row'])\r\n}\r\n\r\nErrorView.defaultProps = {\r\n    process: \"failure\",\r\n    errorMessage: \"Something went wrong. Please try again later\"\r\n}\r\n\r\nexport default ErrorView;","import {useState, useCallback} from 'react';\r\n\r\nconst useHttp = () => {\r\n    /**\r\n     * Custom hook for http-requests.\r\n     * Returns method to get data from url and to set corresponding 'process' state.\r\n     * Also returns state values and clearError method.\r\n     */\r\n    const [process, setProcess] = useState('idle');\r\n    \r\n    const request = useCallback( async (url, method=\"GET\", body=null, headers={'Content-type': 'application/json'}) => {\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setProcess('failure');\r\n            throw(e);\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {\r\n            process, \r\n            setProcess,\r\n            request, \r\n            clearError\r\n        };\r\n\r\n}\r\n\r\nexport default useHttp;","const publicApiKey = \"0cccfebfa143cbee173b3ff218a5afc4\";\r\n\r\nexport default publicApiKey;","import useHttp from '../hooks/http.hook';\r\n\r\nimport publicApiKey from './api-key';\r\n\r\nconst useMarvelAPIService = () => {\r\n    /**\r\n     * Custom hook to work with Marvel API.\r\n     * Returns methods for getting characters\r\n     * and returns corresponding state values.\r\n     * Based on custom 'useHttp' hook.\r\n     */\r\n    const {process, request, clearError, setProcess} = useHttp();\r\n\r\n    const _apiBase = \"https://gateway.marvel.com:443/v1/public\";\r\n    const _apiKeyBase = \"apikey=\";\r\n    const _baseCharactersOffset = 210; /* number of characters to pass from the begginnng of the list */\r\n    const _baseCharactersLimit = 9; /* characters per load */\r\n    const _baseComicsLimit = 4; /* comics per load */\r\n    const _apiUrls = {\r\n        allCharacters: `${_apiBase}/characters?`,\r\n        singleCharacter: `${_apiBase}/characters/`,\r\n        allComics: `${_apiBase}/comics?`,\r\n        singleComics: `${_apiBase}/comics/`,\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseCharactersOffset) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on all characters (limited in _baseCharactersLimit).\r\n         * Takes optional argument for characters offset (number).\r\n         * Returns array with all characters with data \r\n         * transformed for each character.\r\n         */\r\n        const response = await request(\r\n            _apiUrls.allCharacters \r\n            + `limit=${_baseCharactersLimit}&offset=${offset}&${_apiKeyBase}${publicApiKey}`\r\n        );\r\n        return response.data.results.map(_transformCharacterData);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on a character by its unique id.\r\n         * Throws error in case of invalid id.\r\n         * Returns JS-object with transformed data.\r\n         */\r\n        if (id.toString().length < 7) {\r\n            throw new Error('Invalid id of a character');\r\n        }\r\n        const response = await request(\r\n            _apiUrls.singleCharacter \r\n            + id \r\n            + \"?\" \r\n            + _apiKeyBase \r\n            + publicApiKey\r\n            );\r\n        const characterMainData = response.data.results[0];\r\n        return _transformCharacterData(characterMainData);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on a character by their name.\r\n         * Returns JS-object with transformed data.\r\n         */\r\n        const response = await request(\r\n            _apiUrls.allCharacters \r\n            + `name=${name}` \r\n            + \"&\"\r\n            + _apiKeyBase \r\n            + publicApiKey\r\n            );\r\n        const characterMainData = response.data.results[0];\r\n        return _transformCharacterData(characterMainData);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on all comics (limited in _baseComicsLimit).\r\n         * Returns array with all comics with data \r\n         * transformed for each comics.\r\n         */\r\n        const response = await request(\r\n            _apiUrls.allComics \r\n            + `limit=${_baseComicsLimit}&offset=${offset}&${_apiKeyBase}${publicApiKey}`\r\n        );\r\n\r\n        return response.data.results.map(_transformComicsData);\r\n    }\r\n\r\n    const getSingleComics = async (id) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on a comics by its unique id.\r\n         * Throws error in case of invalid id.\r\n         * Returns JS-object with transformed data.\r\n         */\r\n        const response = await request(\r\n            _apiUrls.singleComics \r\n            + id \r\n            + \"?\" \r\n            + _apiKeyBase \r\n            + publicApiKey\r\n            );\r\n        const comicsMainData = response.data.results[0];\r\n        return _transformComicsData(comicsMainData);\r\n    }\r\n\r\n    const getCharacterComics = async (id) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on comics containig specific character by his unique id.\r\n         * Throws error in case of invalid id.\r\n         * Returns array with comics with transformed data\r\n         * on each comics.\r\n         */\r\n        if (id.toString().length < 7) {\r\n            throw new Error('Invalid id of a character');\r\n        }\r\n        const response = await request(\r\n            _apiUrls.singleCharacter \r\n            + id \r\n            + \"/comics?\" \r\n            + _apiKeyBase \r\n            + publicApiKey\r\n            );\r\n            \r\n        return response.data.results.map(_transformComicsData);\r\n    }\r\n\r\n    const _transformCharacterData = (character) => {\r\n        /**\r\n         * Receives character data object (formed by Marvel API) \r\n         * and returns object with transformed character data \r\n         */\r\n        if (!character) {\r\n            return null;\r\n        }\r\n\r\n        /* Validation of character description */\r\n        const noDescriptionMessage = `\r\n            Please visit Homepage or Wiki for detailed description of ${character.name}\r\n        `;\r\n        let description = character.description || noDescriptionMessage;\r\n\r\n        return {\r\n            id: character.id,\r\n            name: character.name,\r\n            description: description,\r\n            thumbnail: character.thumbnail.path + \".\" + character.thumbnail.extension,\r\n            homepage: character.urls[0].url,\r\n            wiki: character.urls[1].url\r\n        }\r\n    }\r\n\r\n    const _transformComicsData = (comics) => {\r\n        /**\r\n         * Receives comics data object (formed by Marvel API) \r\n         * and returns object with transformed data \r\n         */\r\n\r\n        /* Price validation */\r\n        const price = comics.prices[0].price ? `${comics.prices[0].price}$` : \"Price Not Available\";\r\n\r\n        /* Pages validation */\r\n        const pages = comics.pageCount ? `${comics.pageCount} pages` : \"Unknown number of pages\";\r\n\r\n        return {\r\n            id: comics.id,\r\n            name: comics.title,\r\n            description: comics.description || 'No description available',\r\n            price: price,\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            pages: pages,\r\n            language: comics.textObjects.language || 'en-US'\r\n        }\r\n    }\r\n\r\n    return {\r\n        _baseCharactersLimit,\r\n        _baseCharactersOffset,\r\n        _baseComicsLimit,\r\n        process,\r\n        setProcess,\r\n        clearError, \r\n        getAllCharacters, \r\n        getCharacter,\r\n        getAllComics,\r\n        getSingleComics,\r\n        getCharacterComics,\r\n        getCharacterByName\r\n        };\r\n}\r\n\r\nexport default useMarvelAPIService;","import {Component} from 'react';\r\n\r\nimport ErrorView from '../error-view/error-view';\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false,\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({\r\n            error: true\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorView message=\"Something went wrong. Please try again later\" />\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <div className=\"character__skeleton\">\r\n            <p className=\"character__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import Skeleton from \"../components/skeleton/skeleton\";\r\nimport Spinner from \"../components/spinner/spinner\";\r\nimport ErrorView from \"../components/error-view/error-view\";\r\n\r\nconst setContent = (process, character, Component, characterComics=null) => {\r\n    switch (process) {\r\n        case 'idle':\r\n            return characterComics ? <Skeleton /> : <Spinner />;\r\n        case 'loading':\r\n            return <Spinner />;\r\n        case 'success':\r\n            return <Component character={character} characterComics={characterComics}/>;\r\n        case 'failure':\r\n            return <ErrorView flex=\"row\"/>\r\n        default:\r\n            throw new Error(\"Unexpected process state\");\r\n    }\r\n}\r\n\r\nconst setListContent = (process, Component) => {\r\n    switch (process) {\r\n        case 'idle':\r\n            return <Spinner />;\r\n        case 'loading':\r\n            return <><Component />: <Spinner /></>;\r\n        case 'success':\r\n            return <Component />;\r\n        case 'failure':\r\n            return <ErrorView flex=\"column\"/>\r\n        default:\r\n            throw new Error(\"Unexpected process state\");\r\n    }\r\n}\r\n\r\nexport default setContent;\r\nexport {setListContent};"],"sourceRoot":""}