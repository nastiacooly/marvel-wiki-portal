{"version":3,"sources":["components/app-header/app-header.js","services/api-key.js","services/marvel-api-service.js","components/spinner/spinner.js","components/error-view/error-view.js","components/random-character/random-character.js","components/character-card/character-card.js","components/characters-list/characters-list.js","components/skeleton/skeleton.js","components/character-details/character-details.js","components/error-boundary/error-boundary.js","static/img/bottom_bg.png","components/app/app.js","index.js"],"names":["AppHeader","className","href","publicApiKey","MarvelAPIService","_apiBase","_apiKeyBase","_baseCharactersOffset","_baseCharactersLimit","_apiUrls","allCharacters","this","singleCharacter","getResource","url","a","fetch","res","ok","Error","status","json","getAllCharacters","offset","response","data","results","map","_transformCharacterData","getCharacter","id","toString","length","characterMainData","character","noDescriptionMessage","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","Spinner","xmlns","style","margin","background","display","shapeRendering","width","height","viewBox","preserveAspectRatio","cx","cy","r","strokeWidth","stroke","strokeDasharray","fill","strokeLinecap","attributeName","type","dur","repeatCount","keyTimes","values","strokeDashoffset","ErrorView","message","flex","ErrorIcon","y","x","version","transformOrigin","transform","d","begin","defaultProps","RandomCharacter","props","onCharacterLoading","setState","loaded","error","onCharacterLoaded","onError","errorMessage","marvelService","getRandomCharacter","minId","randomId","Math","floor","random","then","catch","getContent","state","content","onClick","Component","CharacterView","imageClassNames","src","alt","CharacterCard","image","onCharacterCardSelected","active","classNames","tabIndex","onKeyPress","e","key","CharactersList","onLoadCharacters","onCharactersLoading","onCharactersLoaded","characters","charactersPerLoad","ended","newItemsLoading","charactersEnded","renderCharacterCards","activeCharacterCard","characterCards","disabled","Skeleton","CharacterDetails","getCharacterDetails","characterId","prevProps","characterComics","item","i","comicsContent","CharacterDetailsView","CharacterComicsView","ErrorBoundary","errorInfo","children","App","vision","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a043858f.chunk.js","sourcesContent":["import './app-header.scss';\r\n\r\nconst AppHeader = () => {\r\n    return (\r\n        <header className=\"app-header\">\r\n            <h1 className=\"app-name\">\r\n                <span className=\"app-name__main-title\">Marvel</span> Wiki Portal\r\n            </h1>\r\n\r\n            <nav className=\"app-menu\">\r\n                <ul className=\"app-menu__list\">\r\n                    <li className=\"app-menu__item app-menu__item_chosen\">\r\n                        <a href=\"marvel.com\">Characters</a>\r\n                    </li>\r\n                    /\r\n                    <li className=\"app-menu__item\">\r\n                        <a href=\"marvel.com\">Comics</a>\r\n                    </li>\r\n                </ul>\r\n\r\n            </nav>\r\n\r\n        </header>\r\n    );\r\n\r\n}\r\n\r\nexport default AppHeader;","const publicApiKey = \"0cccfebfa143cbee173b3ff218a5afc4\";\r\n\r\nexport default publicApiKey;","import publicApiKey from './api-key';\r\n\r\nclass MarvelAPIService {\r\n    _apiBase = \"https://gateway.marvel.com:443/v1/public\";\r\n    _apiKeyBase = \"apikey=\";\r\n    _baseCharactersOffset = 210; /* number of characters to pass from the begginnng of the list */\r\n    _baseCharactersLimit = 9; /* characters per load */\r\n    _apiUrls = {\r\n        allCharacters: `${this._apiBase}/characters?`,\r\n        singleCharacter: `${this._apiBase}/characters/`,\r\n    }\r\n\r\n    getResource = async (url) => {\r\n        let res = await fetch(url);\r\n\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n        }\r\n\r\n        return await res.json();\r\n    }\r\n\r\n    getAllCharacters = async (offset = this._baseCharactersOffset) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on all characters (limited in this._baseCharactersLimit).\r\n         * Takes optional argument for characters offset (number).\r\n         * Returns array with all characters with data \r\n         * transformed for each character.\r\n         */\r\n        const response = await this.getResource(\r\n            this._apiUrls.allCharacters \r\n            + `limit=${this._baseCharactersLimit}&offset=${offset}&${this._apiKeyBase}${publicApiKey}`\r\n        );\r\n        return response.data.results.map(this._transformCharacterData);\r\n    }\r\n\r\n    getCharacter = async (id) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on a character by its unique id.\r\n         * Throws error in case of invalid id.\r\n         * Returns JS-object with transformed data.\r\n         */\r\n        if (id.toString().length < 7) {\r\n            throw new Error('Invalid id of a character');\r\n        }\r\n        const response = await this.getResource(\r\n            this._apiUrls.singleCharacter \r\n            + id \r\n            + \"?\" \r\n            + this._apiKeyBase \r\n            + publicApiKey\r\n            );\r\n        const characterMainData = response.data.results[0];\r\n        return this._transformCharacterData(characterMainData);\r\n    }\r\n\r\n    _transformCharacterData = (character) => {\r\n        /**\r\n         * Receives character data object (formed by Marvel API) \r\n         * and returns object with transformed character data \r\n         */\r\n\r\n        /* Validation of character description */\r\n        const noDescriptionMessage = `\r\n            Please visit Homepage or Wiki for detailed description of ${character.name}\r\n            `;\r\n        let description = character.description || noDescriptionMessage;\r\n\r\n        if (description.length >= 235) {\r\n            description = description.slice(0, 235) + \"...\";\r\n        }\r\n\r\n        return {\r\n            id: character.id,\r\n            name: character.name,\r\n            description: description,\r\n            thumbnail: character.thumbnail.path + \".\" + character.thumbnail.extension,\r\n            homepage: character.urls[0].url,\r\n            wiki: character.urls[1].url,\r\n            comics: character.comics.items,\r\n        }\r\n    }\r\n}\r\n\r\nexport default MarvelAPIService;","const Spinner = () => {\r\n    /* [ldio] generated by https://loading.io/ */ \r\n    return (\r\n        <svg \r\n            xmlns=\"http://www.w3.org/2000/svg\" \r\n            style={{margin: '0 auto', background: 'none', display: 'block', shapeRendering: 'auto'}} \r\n            width=\"200px\" \r\n            height=\"200px\" \r\n            viewBox=\"0 0 100 100\" \r\n            preserveAspectRatio=\"xMidYMid\">\r\n                <circle \r\n                    cx=\"50\" \r\n                    cy=\"50\" \r\n                    r=\"32\" \r\n                    strokeWidth=\"8\" \r\n                    stroke=\"#9f0013\" \r\n                    strokeDasharray=\"50.26548245743669 50.26548245743669\" \r\n                    fill=\"none\" \r\n                    strokeLinecap=\"round\">\r\n                    <animateTransform attributeName=\"transform\" type=\"rotate\" dur=\"2s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"0 50 50;360 50 50\"></animateTransform>\r\n                </circle>\r\n                <circle \r\n                    cx=\"50\" \r\n                    cy=\"50\" \r\n                    r=\"23\" \r\n                    strokeWidth=\"8\" \r\n                    stroke=\"#232222\" \r\n                    strokeDasharray=\"36.12831551628262 36.12831551628262\" \r\n                    strokeDashoffset=\"36.12831551628262\" \r\n                    fill=\"none\" \r\n                    strokeLinecap=\"round\">\r\n                    <animateTransform attributeName=\"transform\" type=\"rotate\" dur=\"2s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"0 50 50;-360 50 50\"></animateTransform>\r\n                </circle>\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport default Spinner;","import PropTypes from 'prop-types';\r\n\r\nimport './error-view.scss';\r\n\r\nconst ErrorView = ({message, flex}) => {\r\n    let className;\r\n    switch(flex) {\r\n        case \"column\":\r\n            className = \"error-view error-view_columned\";\r\n            break;\r\n        case \"row\":\r\n            className = \"error-view error-view_rowed\";\r\n            break;\r\n        default:\r\n            className = \"error-view\";\r\n    }\r\n\r\n    return (\r\n        <div className={className}>\r\n            <ErrorIcon />\r\n            <p className=\"error-view__message\">{message}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst ErrorIcon = () => {\r\n    return (\r\n        <svg \r\n            viewBox=\"0 0 100 100\" \r\n            y=\"0\" \r\n            x=\"0\" \r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            version=\"1.1\" \r\n            style={{height: '150px', width: '150px', background: 'none'}} \r\n            width=\"150px\" \r\n            height=\"150px\">\r\n                <g className=\"ldl-scale\" \r\n                    style={{transformOrigin: '50% 50%', transform: 'scale(0.8, 0.8)'}}>\r\n                <g className=\"ldl-ani\">\r\n                <g className=\"ldl-layer\">\r\n                <g className=\"ldl-ani\" \r\n                    style={{transformOrigin: '50px 50px', transform: 'scale(0.91)'}}>\r\n                    <path fill=\"#e15b64\" d=\"M14.653 85.487c-3.138-1.806-4.167-6.008-2.198-9.12 8.401-13.282 18.34-25.329 29.177-36.099 10.916-10.864 22.708-20.49 34.913-29.273 2.772-1.995 6.57-1.344 8.557 1.485 1.928 2.744 1.471 6.578-1.06 8.732-11.111 9.456-21.591 19.558-30.95 30.517C43.876 62.5 35.786 74.12 29.248 86.488c-1.653 3.126-5.423 4.276-8.429 2.547l-6.166-3.548z\" style={{fill: 'rgb(159, 0, 19)'}}>\r\n                    <animateTransform attributeName=\"transform\" type=\"scale\" dur=\"2s\" repeatCount=\"indefinite\" keyTimes=\"0; 0.5; 1\" values=\"0.8 0.8; 1 1; 0.8 0.8\"></animateTransform>\r\n                    </path>\r\n                </g></g>\r\n                <g className=\"ldl-layer\">\r\n                <g className=\"ldl-ani\" \r\n                    style={{transformOrigin: '50px 50px', transform: 'scale(0.91)'}}>\r\n                    <path fill=\"#e15b64\" d=\"M78.739 82.438c-3.067 1.804-7.041.872-8.916-2.152-6.367-10.267-14.543-19.718-23.698-28.397-9.306-8.827-19.587-16.906-30.29-24.594a6.594 6.594 0 0 1-1.682-8.948l1.23-1.895a6.609 6.609 0 0 1 9.03-2.012c11.571 7.19 22.962 14.943 33.735 23.864 10.673 8.851 20.777 18.958 29.162 30.721 2.256 3.165 1.337 7.584-2.014 9.555l-6.557 3.858z\" style={{fill: 'rgb(159, 0, 19)'}}>\r\n                    <animateTransform attributeName=\"transform\" type=\"scale\" dur=\"2s\" begin=\"0.5s\" repeatCount=\"indefinite\" keyTimes=\"0; 0.5; 1\" values=\"1 1; 0.8 0.8; 1 1\"></animateTransform>\r\n                    </path>\r\n                </g></g>\r\n                </g></g>\r\n        </svg>\r\n    );\r\n}\r\n\r\nErrorView.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n    flex: PropTypes.oneOf(['column', 'row'])\r\n}\r\n\r\nErrorView.defaultProps = {\r\n    message: \"Something went wrong\"\r\n}\r\n\r\nexport default ErrorView;","import {Component} from 'react';\r\nimport {Fragment} from 'react';\r\n\r\nimport MarvelAPIService from '../../services/marvel-api-service';\r\nimport Spinner from '../spinner/spinner';\r\nimport ErrorView from '../error-view/error-view';\r\n\r\nimport '../../button.scss';\r\nimport './random-character.scss';\r\n\r\nclass RandomCharacter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            character: {},\r\n            loaded: false,\r\n            error: false,\r\n            errorMessage: \"\",\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        /* Getting random character on opening the app */\r\n        this.getRandomCharacter();\r\n    }\r\n\r\n    onCharacterLoading = () => {\r\n        /**\r\n         * Keeps corresponding states\r\n         * for loading process.\r\n         */\r\n        this.setState({\r\n            loaded: false,\r\n            error: false\r\n        })\r\n    }\r\n\r\n    onCharacterLoaded = (character) => {\r\n        /**\r\n         * Saves character data to state\r\n         * of this component.\r\n         */\r\n        this.setState({\r\n            character: character,\r\n            loaded: true,\r\n            error: false\r\n        });\r\n    }\r\n\r\n    onError = () => {\r\n        /**\r\n         * Keeps track of error in the state.\r\n         */\r\n        this.setState({\r\n            loaded: true,\r\n            error: true,\r\n            errorMessage: \"Something went wrong. Please try again.\",\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initializing property for the component\r\n     * to communicate with Marvel API\r\n     */\r\n    marvelService = new MarvelAPIService();\r\n\r\n    getRandomCharacter = () => {\r\n        /**\r\n         * Gets data (object) from Marvel API on random character\r\n         * and saves it to the state of this component.\r\n         */\r\n        \r\n        this.onCharacterLoading();\r\n\r\n        const maxId = 1011400;\r\n        const minId = 1011000;\r\n        const randomId = Math.floor(minId + Math.random() * (maxId - minId));\r\n\r\n        this.marvelService\r\n            .getCharacter(randomId)\r\n            .then(this.onCharacterLoaded)\r\n            .catch(this.onError);\r\n    }\r\n\r\n    getContent = () => {\r\n        /**\r\n         * Determines content for rendering\r\n         * depending on error and loaded status.\r\n         */\r\n        const {character, loaded, error, errorMessage} = this.state;\r\n\r\n        /* Return content */\r\n        return (\r\n            error ? \r\n                <ErrorView message={errorMessage} flex=\"row\" /> \r\n                : loaded ? \r\n                    <CharacterView character={character}/> \r\n                    : <Spinner/>\r\n        );\r\n    }\r\n    \r\n    render() {\r\n\r\n        const content = this.getContent();\r\n\r\n        return (\r\n            <section className=\"random-section\">\r\n\r\n                <div className=\"random-character\">\r\n                    {content}\r\n                </div>\r\n\r\n                <div className=\"random-choose\">\r\n                    <p className=\"random-choose__text\">\r\n                        Random character for today!<br/>\r\n                        Do you want to get to know him better?\r\n                    </p>\r\n\r\n                    <div>\r\n                        <p className=\"random-choose__text random-choose__text_margined\">Or choose another one</p>\r\n                        <button \r\n                            className=\"app-button app-button_main app-button_on-dark-bg\"\r\n                            onClick={this.getRandomCharacter}>\r\n                                Try It\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            \r\n            </section>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nconst CharacterView = ({character}) => {\r\n    const {name, thumbnail, description, homepage, wiki} = character;\r\n\r\n\r\n    /* Change styles for a \"not found\" image */\r\n    const imageNotFound = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\";\r\n    let imageClassNames = \"random-character__image\";\r\n    if (thumbnail === imageNotFound) {\r\n        imageClassNames += \" random-character__image_contain\";\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={imageClassNames}>\r\n                <img src={thumbnail} alt=\"random character\" />\r\n            </div>\r\n\r\n            <div className=\"random-character__details\">\r\n                <h3 className=\"random-character__name\">\r\n                    {name}\r\n                </h3>\r\n                <p className=\"random-character__descr\">\r\n                    {description}\r\n                </p>\r\n                <div className=\"random-character__links\">\r\n                    <a href={homepage} className=\"app-button app-button_main\">Homepage</a>\r\n                    <a href={wiki} className=\"app-button\">Wiki</a>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default RandomCharacter;","import {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './character-card.scss';\r\n\r\nclass CharacterCard extends Component {\r\n\r\n    render() {\r\n        const {id, image, name, onCharacterCardSelected, active} = this.props;\r\n\r\n        /* Change styles for a \"not found\" image */\r\n        const imageNotFound = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\";\r\n        let imageClassNames = \"character-card__image\";\r\n        if (this.props.image === imageNotFound) {\r\n            imageClassNames += \" character-card__image_contain\";\r\n        }\r\n\r\n        /* Change styles for selected card */\r\n        let classNames = active ? 'character-card character-card_active' : 'character-card';\r\n\r\n        return (\r\n            <li \r\n                className={classNames}\r\n                tabIndex=\"0\"\r\n                onClick={() => onCharacterCardSelected(id)}\r\n                onKeyPress={(e) => {\r\n                    if (e.key === ' ' || e.key === \"Enter\") {\r\n                        onCharacterCardSelected(id);\r\n                    }\r\n                }}\r\n            >\r\n                    <div className={imageClassNames}>\r\n                        <img src={image} alt=\"Comics Character Portrait\" />\r\n                    </div>\r\n        \r\n                    <div className=\"character-card__details\">\r\n                        <h3 className=\"character-card__name\">{name}</h3>\r\n                    </div>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nCharacterCard.propTypes = {\r\n    active: PropTypes.bool,\r\n    onCharacterCardSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharacterCard;","import {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport MarvelAPIService from '../../services/marvel-api-service';\r\n\r\nimport CharacterCard from '../character-card/character-card';\r\nimport ErrorView from '../error-view/error-view';\r\nimport Spinner from '../spinner/spinner';\r\n\r\nimport './characters-list.scss';\r\n\r\nclass CharactersList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            characters: [],\r\n            loaded: false,\r\n            newItemsLoading: false,\r\n            charactersEnded: false,\r\n            error: false,\r\n            errorMessage: '',\r\n            offset: this.marvelService._baseCharactersOffset,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.onLoadCharacters();\r\n    }\r\n\r\n    /**\r\n     * Initializing property for the component\r\n     * to communicate with Marvel API\r\n     */\r\n    marvelService = new MarvelAPIService();\r\n\r\n    onLoadCharacters = (offset) => {\r\n        /**\r\n         * Gets data (array) from Marvel API on additional\r\n         * 9 characters and saves it to the state \r\n         * of this component.\r\n         */\r\n        this.onCharactersLoading();\r\n\r\n        this.marvelService\r\n            .getAllCharacters(offset)\r\n            .then(this.onCharactersLoaded)\r\n            .catch(this.onError);\r\n    }\r\n\r\n    onCharactersLoaded = (characters) => {\r\n        /**\r\n         * Saves newly uploaded characters data \r\n         * to the state of this component.\r\n         * And updates offset for following uploads.\r\n         */\r\n        this.setState((state) => {     \r\n            const charactersPerLoad = this.marvelService._baseCharactersLimit;\r\n\r\n            /* No \"load more\" button if characters ended */\r\n            let ended = false;\r\n            if (characters.length < charactersPerLoad) {\r\n                ended = true;\r\n            }\r\n            \r\n            return {\r\n                characters: [...state.characters, ...characters],\r\n                loaded: true,\r\n                newItemsLoading: false,\r\n                charactersEnded: ended,\r\n                error: false,\r\n                offset: state.offset + charactersPerLoad,\r\n            }\r\n        });\r\n    }\r\n\r\n    onCharactersLoading = () => {\r\n        /**\r\n         * Keeps corresponding states\r\n         * for loading process.\r\n         */\r\n        this.setState({\r\n            loaded: false,\r\n            error: false,\r\n            newItemsLoading: true\r\n        })\r\n    }\r\n\r\n    onError = () => {\r\n        /**\r\n         * Keeps track of error in the state.\r\n         */\r\n        this.setState({\r\n            loaded: true,\r\n            error: true,\r\n            newItemsLoading: false,\r\n            errorMessage: \"Something went wrong. Please try updating the page.\",\r\n        });\r\n    }\r\n\r\n    renderCharacterCards = (characters) => {\r\n        /**\r\n         * Returns character cards elements\r\n         * with data about characters.\r\n         */\r\n        if (!characters) {\r\n            return null;\r\n        }\r\n\r\n        const {onCharacterCardSelected, activeCharacterCard} = this.props;\r\n        /* Mapping characters to CharacterCard components */\r\n        return characters.map( ({id, name, thumbnail}) => {\r\n            let active = id === activeCharacterCard;\r\n            return <CharacterCard \r\n                        key={id} \r\n                        id={id}\r\n                        name={name} \r\n                        image={thumbnail}\r\n                        onCharacterCardSelected={onCharacterCardSelected}\r\n                        active={active}\r\n                    />;\r\n        });\r\n    }\r\n\r\n    getContent = () => {\r\n        /**\r\n         * Determines content for rendering\r\n         * depending on error and loaded status.\r\n         */\r\n        const {characters, error, loaded, errorMessage} = this.state;\r\n        \r\n        const characterCards = this.renderCharacterCards(characters);\r\n\r\n        /* Return content */\r\n        return (\r\n            error ? \r\n                <ErrorView message={errorMessage} flex=\"column\" /> \r\n                : loaded ? \r\n                    characterCards \r\n                    : (<> {characterCards} <Spinner/> </>)\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const {offset, newItemsLoading, charactersEnded} = this.state;\r\n        const content = this.getContent();\r\n\r\n        return (\r\n            <div className=\"characters-section\">\r\n                <ul className=\"characters-section__list\">\r\n                    {content}\r\n                </ul>\r\n\r\n                <button \r\n                    className=\"app-button app-button_main app-button_wide\"\r\n                    disabled={newItemsLoading}\r\n                    style={{'display': charactersEnded ? 'none' : 'block'}}\r\n                    onClick={() => this.onLoadCharacters(offset)}\r\n                    >\r\n                        Load More\r\n                </button>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nCharactersList.propTypes = {\r\n    activeCharacterCard: PropTypes.number,\r\n    onCharacterCardSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharactersList;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <div className=\"character__skeleton\">\r\n            <p className=\"character__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import {Component} from 'react';\r\nimport {Fragment} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport MarvelAPIService from '../../services/marvel-api-service';\r\nimport ErrorView from '../error-view/error-view';\r\nimport Spinner from '../spinner/spinner';\r\nimport Skeleton from '../skeleton/skeleton';\r\n\r\nimport './character-details.scss';\r\n\r\nclass CharacterDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            character: null,\r\n            loaded: true,\r\n            error: false,\r\n            errorMessage: \"\",\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        /* Getting selected character details */\r\n        this.getCharacterDetails(this.props.characterId);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        /* Getting newly selected character details */\r\n        if (this.props.characterId !== prevProps.characterId) {\r\n            this.getCharacterDetails(this.props.characterId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializing property for the component\r\n     * to communicate with Marvel API\r\n     */\r\n    marvelService = new MarvelAPIService();\r\n\r\n    onCharacterLoading = () => {\r\n        /**\r\n         * Keeps corresponding states\r\n         * for loading process.\r\n         */\r\n        this.setState({\r\n            loaded: false,\r\n            error: false,\r\n            character: null\r\n        })\r\n    }\r\n\r\n    onCharacterLoaded = (character) => {\r\n        /**\r\n         * Saves character data to state\r\n         * of this component.\r\n         */\r\n        this.setState({\r\n            character: character,\r\n            loaded: true,\r\n            error: false\r\n        });\r\n    }\r\n\r\n    onError = () => {\r\n        /**\r\n         * Keeps track of error in the state.\r\n         */\r\n        this.setState({\r\n            loaded: true,\r\n            error: true,\r\n            errorMessage: \"Something went wrong. Please try again.\",\r\n        });\r\n    }\r\n\r\n    getCharacterDetails = (id) => {\r\n        /**\r\n         * Gets data (object) from Marvel API on selected character\r\n         * and saves it to the state of this component.\r\n         */\r\n        if (!id) {\r\n            return;\r\n        }\r\n\r\n        this.onCharacterLoading();\r\n\r\n        this.marvelService\r\n            .getCharacter(id)\r\n            .then(this.onCharacterLoaded)\r\n            .catch(this.onError);\r\n    }\r\n\r\n    getContent = () => {\r\n        /**\r\n         * Determines content for rendering\r\n         * depending on error and loaded status.\r\n         */\r\n        const {character, loaded, error, errorMessage} = this.state;\r\n\r\n        /* Return content */\r\n        return (\r\n            error ? \r\n                <ErrorView message={errorMessage} flex=\"row\" /> \r\n                : loaded ? \r\n                    (character ? <CharacterDetailsView character={character}/> : <Skeleton/>)\r\n                        : <Spinner/>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const {character} = this.state;\r\n        const content = this.getContent();\r\n\r\n        const characterComics = character?.comics?.map((item, i) => {\r\n            return <CharacterComicsView key={i} name={item.name}/>\r\n        });\r\n\r\n        const comicsContent = characterComics && characterComics.length > 0 ? \r\n                                    (<><h5>Comics:</h5> {characterComics}</>) \r\n                                    : null;\r\n    \r\n        return (\r\n            <div className=\"character-info\">\r\n                {content}\r\n                <ul className=\"character-info__comics\">\r\n                    {comicsContent}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nconst CharacterDetailsView = ({character}) => {\r\n    /**\r\n     * Returns element with character details.\r\n     */\r\n    const {name, thumbnail, description, homepage, wiki} = character;\r\n\r\n    /* Change styles for a \"not found\" image */\r\n    const imageNotFound = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\";\r\n    let imageClassNames = \"character-info__image\";\r\n    if (thumbnail === imageNotFound) {\r\n        imageClassNames += \" character-info__image_contain\";\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"character-info__header\">\r\n                    <div className={imageClassNames}>\r\n                        <img src={thumbnail} alt=\"Character Portrait\"/>\r\n                    </div>\r\n    \r\n                    <div className=\"character-info__main\">\r\n                        <h3 className=\"character-info__name\">{name}</h3>\r\n    \r\n                        <div className=\"character-info__links\">\r\n                            <a href={homepage} className=\"app-button app-button_main app-button_mb10\">Homepage</a>\r\n                            <a href={wiki} className=\"app-button\">Wiki</a>\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n    \r\n            <article className=\"character-info__bio\">\r\n                {description}\r\n            </article>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\n\r\nconst CharacterComicsView = (props) => {\r\n    return (\r\n        <li className=\"character-info__single-comics\">\r\n            {props.name}\r\n        </li>\r\n    );\r\n}\r\n\r\nCharacterDetails.propTypes = {\r\n    characterId: PropTypes.number\r\n}\r\n\r\nexport default CharacterDetails;","import {Component} from 'react';\r\n\r\nimport ErrorView from '../error-view/error-view';\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false,\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({\r\n            error: true\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorView />\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/bottom_bg.4d6f9671.png\";","import {Component} from 'react';\n\nimport AppHeader from '../app-header/app-header';\nimport RandomCharacter from '../random-character/random-character';\nimport CharactersList from '../characters-list/characters-list';\nimport CharacterDetails from '../character-details/character-details';\n\nimport ErrorBoundary from '../error-boundary/error-boundary';\n\nimport vision from '../../static/img/bottom_bg.png';\n\nimport './app.scss';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeCharacterCard: null,\n    }\n  }\n\n  onCharacterCardSelected = (id) => {\n    this.setState({\n      activeCharacterCard: id,\n    });\n  }\n\n  render() {\n    const {activeCharacterCard} = this.state;\n\n    return (\n      <div className=\"app-container\">\n        <AppHeader />\n  \n        <main>\n          <ErrorBoundary>\n            <RandomCharacter />\n          </ErrorBoundary>\n  \n          <div className=\"characters-container\">\n            <ErrorBoundary>\n              <CharactersList \n                activeCharacterCard={activeCharacterCard} \n                onCharacterCardSelected={this.onCharacterCardSelected}\n              />\n            </ErrorBoundary>\n\n            <ErrorBoundary>\n              <CharacterDetails characterId={activeCharacterCard}/>\n            </ErrorBoundary>\n          </div>\n\n        </main>\n  \n        <footer className=\"app-footer\">\n          <img \n            src={vision} \n            alt=\"Vision Character in Attacking Pose\" \n            className=\"app-footer__image\"\n          />\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/app/app';\n\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}