{"version":3,"sources":["components/comics-card/comics-card.js","components/comics-list/comics-list.js","components/pages/comics-page.js","components/error-view/error-view.js","hooks/http.hook.js","services/api-key.js","services/marvel-api-service.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/error-boundary/error-boundary.js","components/skeleton/skeleton.js","utils/setContent.js","static/img/Avengers.png","static/img/Avengers_logo.png","components/app-banner/app-banner.js"],"names":["ComicsCard","props","id","name","price","image","imageClassNames","className","tabIndex","to","src","alt","ComicsList","marvelService","useMarvelAPIService","comicsPerLoad","_baseComicsLimit","process","setProcess","clearError","getAllComics","useState","comics","setComics","comicsEnded","setComicsEnded","offset","setOffset","useEffect","onLoadComics","onComicsLoaded","newComics","ended","length","then","content","useMemo","setListContent","map","i","thumbnail","mapToComicsCards","disabled","style","onClick","ComicsPage","Helmet","ErrorView","errorMessage","flex","ErrorIcon","viewBox","y","x","xmlns","version","height","width","background","transformOrigin","transform","fill","d","attributeName","type","dur","repeatCount","keyTimes","values","begin","defaultProps","useHttp","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","publicApiKey","_apiBase","_apiKeyBase","_apiUrls","getAllCharacters","results","_transformCharacterData","getCharacter","toString","characterMainData","getCharacterByName","_transformComicsData","getSingleComics","comicsMainData","getCharacterComics","character","noDescriptionMessage","description","path","extension","homepage","urls","wiki","prices","pages","pageCount","title","language","textObjects","_baseCharactersLimit","_baseCharactersOffset","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","ErrorBoundary","state","error","errorInfo","this","setState","message","children","Component","Skeleton","setContent","characterComics","AppBanner","avengers","logo"],"mappings":"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","file":"static/js/5.fa4a3cfa.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\r\n\r\nimport './comics-card.scss';\r\n\r\nconst ComicsCard = (props) => {\r\n    const {id, name, price, image} = props;\r\n\r\n    /* Change styles for a \"not found\" image */\r\n    const imageNotFound = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\";\r\n    let imageClassNames = \"comics-card__image\";\r\n    if (image === imageNotFound) {\r\n        imageClassNames += \" comics-card__image_fill\";\r\n    }\r\n\r\n    return (\r\n        <li \r\n            className='comics-card'\r\n            tabIndex=\"0\"\r\n            id={id}\r\n        >\r\n            <Link to={`/marvel-wiki-portal/comics/${id}`}>\r\n                <div className={imageClassNames}>\r\n                    <img src={image} alt={`Cover of ${name} comics`} />\r\n                </div>\r\n\r\n                <div className=\"comics-card__details\">\r\n                    <h3 className=\"comics-card__title\">{name}</h3>\r\n                    <span className=\"comics-card__price\">{price}</span>\r\n                </div>\r\n            </Link>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default ComicsCard;","import {useState, useEffect, useMemo} from 'react';\r\n\r\nimport useMarvelAPIService from '../../services/marvel-api-service';\r\nimport { setListContent } from '../../utils/setContent';\r\n\r\nimport ComicsCard from '../comics-card/comics-card';\r\n\r\nimport './comics-list.scss';\r\n\r\n\r\nconst mapToComicsCards = (comics) => {\r\n    /**\r\n     * Helper function for ComicsList component.\r\n     * Receives comics array and maps it to\r\n     * ComicsCard components.\r\n     */\r\n    if (!comics) {\r\n        return null;\r\n    }\r\n\r\n    /* Mapping comics to ComicsCard components */\r\n    return comics.map( ({id, name, price, thumbnail}, i) => {\r\n        return <ComicsCard \r\n                    key={i} \r\n                    id={id}\r\n                    name={name} \r\n                    image={thumbnail}\r\n                    price={price}\r\n                />;\r\n    });\r\n}\r\n\r\nconst ComicsList = () => {\r\n    /* Initializing instances to communicate with Marvel API */\r\n    const marvelService = useMarvelAPIService();\r\n    const comicsPerLoad = marvelService._baseComicsLimit;\r\n    const {process, setProcess, clearError, getAllComics} = marvelService;\r\n    /* Component states */\r\n    const [comics, setComics] = useState([]);\r\n    const [comicsEnded, setComicsEnded] = useState(false);\r\n    const [offset, setOffset] = useState(0);\r\n\r\n    /* Component logic */\r\n    useEffect(() => {\r\n        onLoadComics();\r\n    }, []);\r\n\r\n    const onComicsLoaded = (newComics) => {\r\n        /**\r\n         * Saves newly uploaded comics data \r\n         * to the state of this component.\r\n         * And updates offset for following uploads.\r\n         */ \r\n\r\n        /* No \"load more\" button if characters ended */\r\n        let ended = false;\r\n        if (newComics.length < comicsPerLoad) {\r\n            ended = true;\r\n        }\r\n        \r\n        setComics(comics => [...comics, ...newComics]);\r\n        setComicsEnded(ended);\r\n        setOffset(offset => offset + comicsPerLoad);       \r\n    }\r\n\r\n    const onLoadComics = (offset) => {\r\n        /**\r\n         * Gets data (array) from Marvel API on additional\r\n         * 8 comics and saves it to the state \r\n         * of this component.\r\n         */\r\n        clearError();\r\n\r\n        getAllComics(offset)\r\n            .then(onComicsLoaded)\r\n            .then(() => setProcess('success'));\r\n    }\r\n\r\n    /* Rendering */\r\n    const content = useMemo(() => {\r\n        return setListContent(process, () => mapToComicsCards(comics));\r\n    }, [process]);\r\n\r\n    return (\r\n        <div className=\"comics-section\">\r\n            <ul className=\"comics-section__list\">\r\n                {content}\r\n            </ul>\r\n\r\n            <button \r\n                className=\"app-button app-button_main app-button_wide\"\r\n                disabled={process === \"loading\"}\r\n                style={{'display': comicsEnded ? 'none' : 'block'}}\r\n                onClick={() => onLoadComics(offset)}\r\n                >\r\n                    Load More\r\n            </button>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default ComicsList;","import { Helmet } from 'react-helmet';\r\n\r\nimport AppBanner from '../app-banner/app-banner';\r\nimport ComicsList from '../comics-list/comics-list';\r\nimport ErrorBoundary from '../error-boundary/error-boundary';\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel Wiki Portal - Comics\"\r\n                    />\r\n                <title>Marvel Wiki Portal - Comics</title>\r\n            </Helmet>\r\n\r\n            <AppBanner/>\r\n            <ErrorBoundary>\r\n                <ComicsList />\r\n            </ErrorBoundary>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ComicsPage;","import PropTypes from 'prop-types';\r\n\r\nimport './error-view.scss';\r\n\r\nconst ErrorView = ({process, errorMessage, flex}) => {\r\n    if (process !== \"failure\") {\r\n        return null;\r\n    }\r\n\r\n    let className;\r\n    switch(flex) {\r\n        case \"column\":\r\n            className = \"error-view error-view_columned\";\r\n            break;\r\n        case \"row\":\r\n            className = \"error-view error-view_rowed\";\r\n            break;\r\n        default:\r\n            className = \"error-view\";\r\n    }\r\n\r\n    return (\r\n        <div className={className}>\r\n            <ErrorIcon />\r\n            <p className=\"error-view__message\">{errorMessage}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst ErrorIcon = () => {\r\n    return (\r\n        <svg \r\n            viewBox=\"0 0 100 100\" \r\n            y=\"0\" \r\n            x=\"0\" \r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            version=\"1.1\" \r\n            style={{height: '150px', width: '150px', background: 'none'}} \r\n            width=\"150px\" \r\n            height=\"150px\">\r\n                <g className=\"ldl-scale\" \r\n                    style={{transformOrigin: '50% 50%', transform: 'scale(0.8, 0.8)'}}>\r\n                <g className=\"ldl-ani\">\r\n                <g className=\"ldl-layer\">\r\n                <g className=\"ldl-ani\" \r\n                    style={{transformOrigin: '50px 50px', transform: 'scale(0.91)'}}>\r\n                    <path fill=\"#e15b64\" d=\"M14.653 85.487c-3.138-1.806-4.167-6.008-2.198-9.12 8.401-13.282 18.34-25.329 29.177-36.099 10.916-10.864 22.708-20.49 34.913-29.273 2.772-1.995 6.57-1.344 8.557 1.485 1.928 2.744 1.471 6.578-1.06 8.732-11.111 9.456-21.591 19.558-30.95 30.517C43.876 62.5 35.786 74.12 29.248 86.488c-1.653 3.126-5.423 4.276-8.429 2.547l-6.166-3.548z\" style={{fill: 'rgb(159, 0, 19)'}}>\r\n                    <animateTransform attributeName=\"transform\" type=\"scale\" dur=\"2s\" repeatCount=\"indefinite\" keyTimes=\"0; 0.5; 1\" values=\"0.8 0.8; 1 1; 0.8 0.8\"></animateTransform>\r\n                    </path>\r\n                </g></g>\r\n                <g className=\"ldl-layer\">\r\n                <g className=\"ldl-ani\" \r\n                    style={{transformOrigin: '50px 50px', transform: 'scale(0.91)'}}>\r\n                    <path fill=\"#e15b64\" d=\"M78.739 82.438c-3.067 1.804-7.041.872-8.916-2.152-6.367-10.267-14.543-19.718-23.698-28.397-9.306-8.827-19.587-16.906-30.29-24.594a6.594 6.594 0 0 1-1.682-8.948l1.23-1.895a6.609 6.609 0 0 1 9.03-2.012c11.571 7.19 22.962 14.943 33.735 23.864 10.673 8.851 20.777 18.958 29.162 30.721 2.256 3.165 1.337 7.584-2.014 9.555l-6.557 3.858z\" style={{fill: 'rgb(159, 0, 19)'}}>\r\n                    <animateTransform attributeName=\"transform\" type=\"scale\" dur=\"2s\" begin=\"0.5s\" repeatCount=\"indefinite\" keyTimes=\"0; 0.5; 1\" values=\"1 1; 0.8 0.8; 1 1\"></animateTransform>\r\n                    </path>\r\n                </g></g>\r\n                </g></g>\r\n        </svg>\r\n    );\r\n}\r\n\r\nErrorView.propTypes = {\r\n    process: PropTypes.string,\r\n    errorMessage: PropTypes.string,\r\n    flex: PropTypes.oneOf(['column', 'row'])\r\n}\r\n\r\nErrorView.defaultProps = {\r\n    process: \"failure\",\r\n    errorMessage: \"Something went wrong. Please try again later\"\r\n}\r\n\r\nexport default ErrorView;","import {useState, useCallback} from 'react';\r\n\r\nconst useHttp = () => {\r\n    /**\r\n     * Custom hook for http-requests.\r\n     * Returns method to get data from url and to set corresponding 'process' state.\r\n     * Also returns state values and clearError method.\r\n     */\r\n    const [process, setProcess] = useState('idle');\r\n    \r\n    const request = useCallback( async (url, method=\"GET\", body=null, headers={'Content-type': 'application/json'}) => {\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setProcess('failure');\r\n            throw(e);\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {\r\n            process, \r\n            setProcess,\r\n            request, \r\n            clearError\r\n        };\r\n\r\n}\r\n\r\nexport default useHttp;","const publicApiKey = \"0cccfebfa143cbee173b3ff218a5afc4\";\r\n\r\nexport default publicApiKey;","import useHttp from '../hooks/http.hook';\r\n\r\nimport publicApiKey from './api-key';\r\n\r\nconst useMarvelAPIService = () => {\r\n    /**\r\n     * Custom hook to work with Marvel API.\r\n     * Returns methods for getting characters\r\n     * and returns corresponding state values.\r\n     * Based on custom 'useHttp' hook.\r\n     */\r\n    const {process, request, clearError, setProcess} = useHttp();\r\n\r\n    const _apiBase = \"https://gateway.marvel.com:443/v1/public\";\r\n    const _apiKeyBase = \"apikey=\";\r\n    const _baseCharactersOffset = 210; /* number of characters to pass from the begginnng of the list */\r\n    const _baseCharactersLimit = 9; /* characters per load */\r\n    const _baseComicsLimit = 4; /* comics per load */\r\n    const _apiUrls = {\r\n        allCharacters: `${_apiBase}/characters?`,\r\n        singleCharacter: `${_apiBase}/characters/`,\r\n        allComics: `${_apiBase}/comics?`,\r\n        singleComics: `${_apiBase}/comics/`,\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseCharactersOffset) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on all characters (limited in _baseCharactersLimit).\r\n         * Takes optional argument for characters offset (number).\r\n         * Returns array with all characters with data \r\n         * transformed for each character.\r\n         */\r\n        const response = await request(\r\n            _apiUrls.allCharacters \r\n            + `limit=${_baseCharactersLimit}&offset=${offset}&${_apiKeyBase}${publicApiKey}`\r\n        );\r\n        return response.data.results.map(_transformCharacterData);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on a character by its unique id.\r\n         * Throws error in case of invalid id.\r\n         * Returns JS-object with transformed data.\r\n         */\r\n        if (id.toString().length < 7) {\r\n            throw new Error('Invalid id of a character');\r\n        }\r\n        const response = await request(\r\n            _apiUrls.singleCharacter \r\n            + id \r\n            + \"?\" \r\n            + _apiKeyBase \r\n            + publicApiKey\r\n            );\r\n        const characterMainData = response.data.results[0];\r\n        return _transformCharacterData(characterMainData);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on a character by their name.\r\n         * Returns JS-object with transformed data.\r\n         */\r\n        const response = await request(\r\n            _apiUrls.allCharacters \r\n            + `name=${name}` \r\n            + \"&\"\r\n            + _apiKeyBase \r\n            + publicApiKey\r\n            );\r\n        const characterMainData = response.data.results[0];\r\n        return _transformCharacterData(characterMainData);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on all comics (limited in _baseComicsLimit).\r\n         * Returns array with all comics with data \r\n         * transformed for each comics.\r\n         */\r\n        const response = await request(\r\n            _apiUrls.allComics \r\n            + `limit=${_baseComicsLimit}&offset=${offset}&${_apiKeyBase}${publicApiKey}`\r\n        );\r\n\r\n        return response.data.results.map(_transformComicsData);\r\n    }\r\n\r\n    const getSingleComics = async (id) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on a comics by its unique id.\r\n         * Throws error in case of invalid id.\r\n         * Returns JS-object with transformed data.\r\n         */\r\n        const response = await request(\r\n            _apiUrls.singleComics \r\n            + id \r\n            + \"?\" \r\n            + _apiKeyBase \r\n            + publicApiKey\r\n            );\r\n        const comicsMainData = response.data.results[0];\r\n        return _transformComicsData(comicsMainData);\r\n    }\r\n\r\n    const getCharacterComics = async (id) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on comics containig specific character by his unique id.\r\n         * Throws error in case of invalid id.\r\n         * Returns array with comics with transformed data\r\n         * on each comics.\r\n         */\r\n        if (id.toString().length < 7) {\r\n            throw new Error('Invalid id of a character');\r\n        }\r\n        const response = await request(\r\n            _apiUrls.singleCharacter \r\n            + id \r\n            + \"/comics?\" \r\n            + _apiKeyBase \r\n            + publicApiKey\r\n            );\r\n            \r\n        return response.data.results.map(_transformComicsData);\r\n    }\r\n\r\n    const _transformCharacterData = (character) => {\r\n        /**\r\n         * Receives character data object (formed by Marvel API) \r\n         * and returns object with transformed character data \r\n         */\r\n        if (!character) {\r\n            return null;\r\n        }\r\n\r\n        /* Validation of character description */\r\n        const noDescriptionMessage = `\r\n            Please visit Homepage or Wiki for detailed description of ${character.name}\r\n        `;\r\n        let description = character.description || noDescriptionMessage;\r\n\r\n        return {\r\n            id: character.id,\r\n            name: character.name,\r\n            description: description,\r\n            thumbnail: character.thumbnail.path + \".\" + character.thumbnail.extension,\r\n            homepage: character.urls[0].url,\r\n            wiki: character.urls[1].url\r\n        }\r\n    }\r\n\r\n    const _transformComicsData = (comics) => {\r\n        /**\r\n         * Receives comics data object (formed by Marvel API) \r\n         * and returns object with transformed data \r\n         */\r\n\r\n        /* Price validation */\r\n        const price = comics.prices[0].price ? `${comics.prices[0].price}$` : \"Price Not Available\";\r\n\r\n        /* Pages validation */\r\n        const pages = comics.pageCount ? `${comics.pageCount} pages` : \"Unknown number of pages\";\r\n\r\n        return {\r\n            id: comics.id,\r\n            name: comics.title,\r\n            description: comics.description || 'No description available',\r\n            price: price,\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            pages: pages,\r\n            language: comics.textObjects.language || 'en-US'\r\n        }\r\n    }\r\n\r\n    return {\r\n        _baseCharactersLimit,\r\n        _baseCharactersOffset,\r\n        _baseComicsLimit,\r\n        process,\r\n        setProcess,\r\n        clearError, \r\n        getAllCharacters, \r\n        getCharacter,\r\n        getAllComics,\r\n        getSingleComics,\r\n        getCharacterComics,\r\n        getCharacterByName\r\n        };\r\n}\r\n\r\nexport default useMarvelAPIService;","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import {Component} from 'react';\r\n\r\nimport ErrorView from '../error-view/error-view';\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false,\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({\r\n            error: true\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorView message=\"Something went wrong. Please try again later\" />\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <div className=\"character__skeleton\">\r\n            <p className=\"character__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import Skeleton from \"../components/skeleton/skeleton\";\r\nimport Spinner from \"../components/spinner/spinner\";\r\nimport ErrorView from \"../components/error-view/error-view\";\r\n\r\nconst setContent = (process, character, Component, characterComics=null) => {\r\n    switch (process) {\r\n        case 'idle':\r\n            return characterComics ? <Skeleton /> : <Spinner />;\r\n        case 'loading':\r\n            return <Spinner />;\r\n        case 'success':\r\n            return <Component character={character} characterComics={characterComics}/>;\r\n        case 'failure':\r\n            return <ErrorView flex=\"row\"/>\r\n        default:\r\n            throw new Error(\"Unexpected process state\");\r\n    }\r\n}\r\n\r\nconst setListContent = (process, Component) => {\r\n    switch (process) {\r\n        case 'idle':\r\n            return <Spinner />;\r\n        case 'loading':\r\n            return <><Component />: <Spinner /></>;\r\n        case 'success':\r\n            return <Component />;\r\n        case 'failure':\r\n            return <ErrorView flex=\"column\"/>\r\n        default:\r\n            throw new Error(\"Unexpected process state\");\r\n    }\r\n}\r\n\r\nexport default setContent;\r\nexport {setListContent};","export default __webpack_public_path__ + \"static/media/Avengers.c29e0ef0.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9b944f71.png\";","import './app-banner.scss';\r\n\r\nimport avengers from '../../static/img/Avengers.png';\r\nimport logo from '../../static/img/Avengers_logo.png';\r\n\r\nconst AppBanner = () => {\r\n    return (\r\n        <div className=\"banner\">\r\n            <div className=\"banner__image\">\r\n                <img src={avengers} alt=\"Avengers\"/>\r\n            </div>\r\n\r\n            <div className=\"banner__text\">\r\n                <p>New comics every week!</p>\r\n                <p>Stay tuned!</p>\r\n            </div>\r\n\r\n            <div className=\"banner__image\">\r\n                <img src={logo} alt=\"Avengers Logo\"/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppBanner;"],"sourceRoot":""}