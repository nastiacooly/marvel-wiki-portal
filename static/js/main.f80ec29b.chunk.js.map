{"version":3,"sources":["hooks/http.hook.js","services/api-key.js","services/marvel-api-service.js","components/spinner/spinner.js","components/error-view/error-view.js","components/random-character/random-character.js","components/character-card/character-card.js","components/characters-list/characters-list.js","components/skeleton/skeleton.js","components/character-details/character-details.js","components/error-boundary/error-boundary.js","static/img/bottom_bg.png","components/pages/characters-page.js","static/img/Avengers.png","static/img/Avengers_logo.png","components/app-banner/app-banner.js","components/comics-card/comics-card.js","components/comics-list/comics-list.js","components/pages/comics-page.js","components/pages/comics-details/comics-details.js","components/pages/404.js","components/app-header/app-header.js","components/app/app.js","index.js"],"names":["useHttp","initialLoadedState","useState","loaded","setLoaded","error","setError","errorMessage","setErrorMessage","newItemsLoading","setNewItemsLoading","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","clearError","publicApiKey","useMarvelAPIService","_apiBase","_apiKeyBase","_baseCharactersOffset","_baseCharactersLimit","_baseComicsLimit","_apiUrls","allCharacters","singleCharacter","allComics","singleComics","getAllCharacters","offset","results","map","_transformCharacterData","getCharacter","id","toString","length","characterMainData","getAllComics","_transformComicsData","getSingleComics","comicsMainData","character","noDescriptionMessage","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","price","prices","pages","pageCount","title","language","textObjects","Spinner","xmlns","style","margin","background","display","shapeRendering","width","height","viewBox","preserveAspectRatio","cx","cy","r","strokeWidth","stroke","strokeDasharray","fill","strokeLinecap","attributeName","type","dur","repeatCount","keyTimes","values","strokeDashoffset","ErrorView","className","message","flex","ErrorIcon","y","x","version","transformOrigin","transform","d","begin","defaultProps","CharacterView","imageClassNames","src","alt","href","RandomCharacter","setCharacter","useEffect","getRandomCharacter","onCharacterLoaded","minId","randomId","Math","floor","random","then","content","onClick","CharacterCard","props","image","onCharacterCardSelected","classNames","active","tabIndex","onKeyPress","e","key","CharactersList","activeCharacterCard","marvelService","baseOffset","charactersPerLoad","characters","setCharacters","charactersEnded","setCharactersEnded","setOffset","onLoadCharacters","onCharactersLoaded","newCharacters","ended","characterCards","renderCharacterCards","getContent","disabled","Skeleton","CharacterDetailsView","CharacterComicsView","CharacterDetails","characterId","getCharacterDetails","characterComics","item","i","comicsContent","ErrorBoundary","state","errorInfo","this","setState","children","Component","CharactersPage","setActiveCharacterCard","vision","AppBanner","avengers","logo","ComicsCard","to","ComicsList","comicsPerLoad","setComics","comicsEnded","setComicsEnded","onLoadComics","onComicsLoaded","newComics","comicsCards","renderComicsCards","ComicsPage","ComicsDetailsView","ComicsDetails","comicsId","useParams","getComicsDetails","NotFound","AppHeader","end","App","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f80ec29b.chunk.js","sourcesContent":["import {useState, useCallback} from 'react';\r\n\r\nconst useHttp = (initialLoadedState = false) => {\r\n    /**\r\n     * Custom hook for http-requests.\r\n     * Returns method to get data from url and to set corresponding 'loaded' and 'error' states.\r\n     * Also returns state values and clearError method.\r\n     */\r\n    const [loaded, setLoaded] = useState(initialLoadedState);\r\n    const [error, setError] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [newItemsLoading, setNewItemsLoading] = useState(false);\r\n    \r\n    const request = useCallback( async (url, method=\"GET\", body=null, headers={'Content-type': 'application/json'}) => {\r\n        setLoaded(false);\r\n        setError(false);\r\n        setNewItemsLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoaded(true);\r\n            setError(false);\r\n            setNewItemsLoading(false);\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoaded(true);\r\n            setError(true);\r\n            setNewItemsLoading(false);\r\n            setErrorMessage(\"Something went wrong. Please try again later.\");\r\n            throw(e);\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(false);\r\n        setErrorMessage('');\r\n    }, []);\r\n\r\n    return {loaded, error, errorMessage, newItemsLoading, request, clearError};\r\n\r\n}\r\n\r\nexport default useHttp;","const publicApiKey = \"0cccfebfa143cbee173b3ff218a5afc4\";\r\n\r\nexport default publicApiKey;","import useHttp from '../hooks/http.hook';\r\n\r\nimport publicApiKey from './api-key';\r\n\r\nconst useMarvelAPIService = (initialLoadedState = false) => {\r\n    /**\r\n     * Custom hook to work with Marvel API.\r\n     * Returns methods for getting characters\r\n     * and returns corresponding state values.\r\n     * Based on custom 'useHttp' hook.\r\n     */\r\n    const {loaded, error, errorMessage, request, clearError} = useHttp(initialLoadedState);\r\n\r\n    const _apiBase = \"https://gateway.marvel.com:443/v1/public\";\r\n    const _apiKeyBase = \"apikey=\";\r\n    const _baseCharactersOffset = 210; /* number of characters to pass from the begginnng of the list */\r\n    const _baseCharactersLimit = 9; /* characters per load */\r\n    const _baseComicsLimit = 4; /* comics per load */\r\n    const _apiUrls = {\r\n        allCharacters: `${_apiBase}/characters?`,\r\n        singleCharacter: `${_apiBase}/characters/`,\r\n        allComics: `${_apiBase}/comics?`,\r\n        singleComics: `${_apiBase}/comics/`,\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseCharactersOffset) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on all characters (limited in _baseCharactersLimit).\r\n         * Takes optional argument for characters offset (number).\r\n         * Returns array with all characters with data \r\n         * transformed for each character.\r\n         */\r\n        const response = await request(\r\n            _apiUrls.allCharacters \r\n            + `limit=${_baseCharactersLimit}&offset=${offset}&${_apiKeyBase}${publicApiKey}`\r\n        );\r\n        return response.data.results.map(_transformCharacterData);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on a character by its unique id.\r\n         * Throws error in case of invalid id.\r\n         * Returns JS-object with transformed data.\r\n         */\r\n        if (id.toString().length < 7) {\r\n            throw new Error('Invalid id of a character');\r\n        }\r\n        const response = await request(\r\n            _apiUrls.singleCharacter \r\n            + id \r\n            + \"?\" \r\n            + _apiKeyBase \r\n            + publicApiKey\r\n            );\r\n        const characterMainData = response.data.results[0];\r\n        return _transformCharacterData(characterMainData);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on all comics (limited in _baseComicsLimit).\r\n         * Returns array with all comics with data \r\n         * transformed for each comics.\r\n         */\r\n        const response = await request(\r\n            _apiUrls.allComics \r\n            + `limit=${_baseComicsLimit}&offset=${offset}&${_apiKeyBase}${publicApiKey}`\r\n        );\r\n\r\n        return response.data.results.map(_transformComicsData);\r\n    }\r\n\r\n    const getSingleComics = async (id) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on a comics by its unique id.\r\n         * Throws error in case of invalid id.\r\n         * Returns JS-object with transformed data.\r\n         */\r\n        const response = await request(\r\n            _apiUrls.singleComics \r\n            + id \r\n            + \"?\" \r\n            + _apiKeyBase \r\n            + publicApiKey\r\n            );\r\n        const comicsMainData = response.data.results[0];\r\n        return _transformComicsData(comicsMainData);\r\n    }\r\n\r\n    const _transformCharacterData = (character) => {\r\n        /**\r\n         * Receives character data object (formed by Marvel API) \r\n         * and returns object with transformed character data \r\n         */\r\n\r\n        /* Validation of character description */\r\n        const noDescriptionMessage = `\r\n            Please visit Homepage or Wiki for detailed description of ${character.name}\r\n            `;\r\n        let description = character.description || noDescriptionMessage;\r\n\r\n        if (description.length >= 235) {\r\n            description = description.slice(0, 235) + \"...\";\r\n        }\r\n\r\n        return {\r\n            id: character.id,\r\n            name: character.name,\r\n            description: description,\r\n            thumbnail: character.thumbnail.path + \".\" + character.thumbnail.extension,\r\n            homepage: character.urls[0].url,\r\n            wiki: character.urls[1].url,\r\n            comics: character.comics.items,\r\n        }\r\n    }\r\n\r\n    const _transformComicsData = (comics) => {\r\n        /**\r\n         * Receives comics data object (formed by Marvel API) \r\n         * and returns object with transformed data \r\n         */\r\n\r\n        /* Price validation */\r\n        const price = comics.prices[0].price ? `${comics.prices[0].price}$` : \"Price Not Available\";\r\n\r\n        /* Pages validation */\r\n        const pages = comics.pageCount ? `${comics.pageCount} pages` : \"Unknown number of pages\";\r\n\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'No description available',\r\n            price: price,\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            pages: pages,\r\n            language: comics.textObjects.language || 'en-US'\r\n        }\r\n    }\r\n\r\n    return {\r\n        _baseCharactersLimit,\r\n        _baseCharactersOffset,\r\n        _baseComicsLimit,\r\n        loaded, \r\n        error, \r\n        errorMessage, \r\n        clearError, \r\n        getAllCharacters, \r\n        getCharacter,\r\n        getAllComics,\r\n        getSingleComics\r\n        };\r\n}\r\n\r\nexport default useMarvelAPIService;","const Spinner = () => {\r\n    /* [ldio] generated by https://loading.io/ */ \r\n    return (\r\n        <svg \r\n            xmlns=\"http://www.w3.org/2000/svg\" \r\n            style={{margin: '0 auto', background: 'none', display: 'block', shapeRendering: 'auto'}} \r\n            width=\"200px\" \r\n            height=\"200px\" \r\n            viewBox=\"0 0 100 100\" \r\n            preserveAspectRatio=\"xMidYMid\">\r\n                <circle \r\n                    cx=\"50\" \r\n                    cy=\"50\" \r\n                    r=\"32\" \r\n                    strokeWidth=\"8\" \r\n                    stroke=\"#9f0013\" \r\n                    strokeDasharray=\"50.26548245743669 50.26548245743669\" \r\n                    fill=\"none\" \r\n                    strokeLinecap=\"round\">\r\n                    <animateTransform attributeName=\"transform\" type=\"rotate\" dur=\"2s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"0 50 50;360 50 50\"></animateTransform>\r\n                </circle>\r\n                <circle \r\n                    cx=\"50\" \r\n                    cy=\"50\" \r\n                    r=\"23\" \r\n                    strokeWidth=\"8\" \r\n                    stroke=\"#232222\" \r\n                    strokeDasharray=\"36.12831551628262 36.12831551628262\" \r\n                    strokeDashoffset=\"36.12831551628262\" \r\n                    fill=\"none\" \r\n                    strokeLinecap=\"round\">\r\n                    <animateTransform attributeName=\"transform\" type=\"rotate\" dur=\"2s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"0 50 50;-360 50 50\"></animateTransform>\r\n                </circle>\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport default Spinner;","import PropTypes from 'prop-types';\r\n\r\nimport './error-view.scss';\r\n\r\nconst ErrorView = ({message, flex}) => {\r\n    let className;\r\n    switch(flex) {\r\n        case \"column\":\r\n            className = \"error-view error-view_columned\";\r\n            break;\r\n        case \"row\":\r\n            className = \"error-view error-view_rowed\";\r\n            break;\r\n        default:\r\n            className = \"error-view\";\r\n    }\r\n\r\n    return (\r\n        <div className={className}>\r\n            <ErrorIcon />\r\n            <p className=\"error-view__message\">{message}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst ErrorIcon = () => {\r\n    return (\r\n        <svg \r\n            viewBox=\"0 0 100 100\" \r\n            y=\"0\" \r\n            x=\"0\" \r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            version=\"1.1\" \r\n            style={{height: '150px', width: '150px', background: 'none'}} \r\n            width=\"150px\" \r\n            height=\"150px\">\r\n                <g className=\"ldl-scale\" \r\n                    style={{transformOrigin: '50% 50%', transform: 'scale(0.8, 0.8)'}}>\r\n                <g className=\"ldl-ani\">\r\n                <g className=\"ldl-layer\">\r\n                <g className=\"ldl-ani\" \r\n                    style={{transformOrigin: '50px 50px', transform: 'scale(0.91)'}}>\r\n                    <path fill=\"#e15b64\" d=\"M14.653 85.487c-3.138-1.806-4.167-6.008-2.198-9.12 8.401-13.282 18.34-25.329 29.177-36.099 10.916-10.864 22.708-20.49 34.913-29.273 2.772-1.995 6.57-1.344 8.557 1.485 1.928 2.744 1.471 6.578-1.06 8.732-11.111 9.456-21.591 19.558-30.95 30.517C43.876 62.5 35.786 74.12 29.248 86.488c-1.653 3.126-5.423 4.276-8.429 2.547l-6.166-3.548z\" style={{fill: 'rgb(159, 0, 19)'}}>\r\n                    <animateTransform attributeName=\"transform\" type=\"scale\" dur=\"2s\" repeatCount=\"indefinite\" keyTimes=\"0; 0.5; 1\" values=\"0.8 0.8; 1 1; 0.8 0.8\"></animateTransform>\r\n                    </path>\r\n                </g></g>\r\n                <g className=\"ldl-layer\">\r\n                <g className=\"ldl-ani\" \r\n                    style={{transformOrigin: '50px 50px', transform: 'scale(0.91)'}}>\r\n                    <path fill=\"#e15b64\" d=\"M78.739 82.438c-3.067 1.804-7.041.872-8.916-2.152-6.367-10.267-14.543-19.718-23.698-28.397-9.306-8.827-19.587-16.906-30.29-24.594a6.594 6.594 0 0 1-1.682-8.948l1.23-1.895a6.609 6.609 0 0 1 9.03-2.012c11.571 7.19 22.962 14.943 33.735 23.864 10.673 8.851 20.777 18.958 29.162 30.721 2.256 3.165 1.337 7.584-2.014 9.555l-6.557 3.858z\" style={{fill: 'rgb(159, 0, 19)'}}>\r\n                    <animateTransform attributeName=\"transform\" type=\"scale\" dur=\"2s\" begin=\"0.5s\" repeatCount=\"indefinite\" keyTimes=\"0; 0.5; 1\" values=\"1 1; 0.8 0.8; 1 1\"></animateTransform>\r\n                    </path>\r\n                </g></g>\r\n                </g></g>\r\n        </svg>\r\n    );\r\n}\r\n\r\nErrorView.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n    flex: PropTypes.oneOf(['column', 'row'])\r\n}\r\n\r\nErrorView.defaultProps = {\r\n    message: \"Something went wrong\"\r\n}\r\n\r\nexport default ErrorView;","import {useState, useEffect} from 'react';\r\n\r\nimport useMarvelAPIService from '../../services/marvel-api-service';\r\nimport Spinner from '../spinner/spinner';\r\nimport ErrorView from '../error-view/error-view';\r\n\r\nimport '../../button.scss';\r\nimport './random-character.scss';\r\n\r\nconst RandomCharacter = () => {\r\n    /* Initializing instances to communicate with Marvel API and work with 'loaded' and 'error' states */\r\n    const {loaded, error, errorMessage, getCharacter, clearError} = useMarvelAPIService();\r\n\r\n    /* Component states */\r\n    const [character, setCharacter] = useState({});\r\n\r\n    /* Component logic */\r\n\r\n    useEffect(() => {\r\n        /* Getting random character on opening the app */\r\n        getRandomCharacter();\r\n    }, []);\r\n\r\n    const onCharacterLoaded = (character) => {\r\n        /**\r\n         * Saves character data to state\r\n         * of this component.\r\n         */\r\n        setCharacter(character);\r\n    }\r\n\r\n    const getRandomCharacter = () => {\r\n        /**\r\n         * Gets data (object) from Marvel API on random character\r\n         * and saves it to the state of this component.\r\n         */\r\n        clearError();\r\n\r\n        const maxId = 1011400;\r\n        const minId = 1011000;\r\n        const randomId = Math.floor(minId + Math.random() * (maxId - minId));\r\n\r\n        getCharacter(randomId)\r\n            .then(onCharacterLoaded);\r\n    }\r\n\r\n    const getContent = () => {\r\n        /**\r\n         * Returns content for rendering\r\n         * depending on error and loaded status.\r\n         */\r\n        return (\r\n            error ? \r\n                <ErrorView message={errorMessage} flex=\"row\" /> \r\n                : loaded ? \r\n                    <CharacterView character={character}/> \r\n                    : <Spinner/>\r\n        );\r\n    }\r\n\r\n    /* Rendering */\r\n\r\n    const content = getContent();\r\n\r\n    return (\r\n        <section className=\"random-section\">\r\n\r\n            <div className=\"random-character\">\r\n                {content}\r\n            </div>\r\n\r\n            <div className=\"random-choose\">\r\n                <p className=\"random-choose__text\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n\r\n                <div>\r\n                    <p className=\"random-choose__text random-choose__text_margined\">Or choose another one</p>\r\n                    <button \r\n                        className=\"app-button app-button_main app-button_on-dark-bg\"\r\n                        onClick={getRandomCharacter}>\r\n                            Try It\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        \r\n        </section>\r\n        \r\n    );\r\n}\r\n\r\n\r\nconst CharacterView = ({character}) => {\r\n    const {name, thumbnail, description, homepage, wiki} = character;\r\n\r\n    /* Change styles for a \"not found\" image */\r\n    const imageNotFound = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\";\r\n    let imageClassNames = \"random-character__image\";\r\n    if (thumbnail === imageNotFound) {\r\n        imageClassNames += \" random-character__image_contain\";\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={imageClassNames}>\r\n                <img src={thumbnail} alt=\"random character\" />\r\n            </div>\r\n\r\n            <div className=\"random-character__details\">\r\n                <h3 className=\"random-character__name\">\r\n                    {name}\r\n                </h3>\r\n                <p className=\"random-character__descr\">\r\n                    {description}\r\n                </p>\r\n                <div className=\"random-character__links\">\r\n                    <a href={homepage} className=\"app-button app-button_main\">Homepage</a>\r\n                    <a href={wiki} className=\"app-button\">Wiki</a>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default RandomCharacter;","import PropTypes from 'prop-types';\r\n\r\nimport './character-card.scss';\r\n\r\nconst CharacterCard = (props) => {\r\n    const {id, image, name, onCharacterCardSelected, active} = props;\r\n\r\n    /* Change styles for a \"not found\" image */\r\n    const imageNotFound = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\";\r\n    let imageClassNames = \"character-card__image\";\r\n    if (image === imageNotFound) {\r\n        imageClassNames += \" character-card__image_contain\";\r\n    }\r\n\r\n    /* Change styles for selected card */\r\n    let classNames = active ? 'character-card character-card_active' : 'character-card';\r\n\r\n    return (\r\n        <li \r\n            className={classNames}\r\n            tabIndex=\"0\"\r\n            onClick={() => onCharacterCardSelected(id)}\r\n            onKeyPress={(e) => {\r\n                if (e.key === ' ' || e.key === \"Enter\") {\r\n                    onCharacterCardSelected(id);\r\n                }\r\n            }}\r\n        >\r\n                <div className={imageClassNames}>\r\n                    <img src={image} alt=\"Comics Character Portrait\" />\r\n                </div>\r\n    \r\n                <div className=\"character-card__details\">\r\n                    <h3 className=\"character-card__name\">{name}</h3>\r\n                </div>\r\n        </li>\r\n    );\r\n}\r\n\r\nCharacterCard.propTypes = {\r\n    active: PropTypes.bool,\r\n    onCharacterCardSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharacterCard;","import {useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelAPIService from '../../services/marvel-api-service';\r\n\r\nimport CharacterCard from '../character-card/character-card';\r\nimport ErrorView from '../error-view/error-view';\r\nimport Spinner from '../spinner/spinner';\r\n\r\nimport './characters-list.scss';\r\n\r\nconst CharactersList = (props) => {\r\n    const {onCharacterCardSelected, activeCharacterCard} = props;\r\n    /* Initializing instances to communicate with Marvel API */\r\n    const marvelService = useMarvelAPIService();\r\n    const baseOffset = marvelService._baseCharactersOffset;\r\n    const charactersPerLoad = marvelService._baseCharactersLimit;\r\n    const {loaded, error, errorMessage, newItemsLoading, clearError, getAllCharacters} = marvelService;\r\n    /* Component states */\r\n    const [characters, setCharacters] = useState([]);\r\n    const [charactersEnded, setCharactersEnded] = useState(false);\r\n    const [offset, setOffset] = useState(baseOffset);\r\n\r\n    /* Component logic */\r\n    useEffect(() => {\r\n        onLoadCharacters();\r\n    }, []);\r\n\r\n    const onCharactersLoaded = (newCharacters) => {\r\n        /**\r\n         * Saves newly uploaded characters data \r\n         * to the state of this component.\r\n         * And updates offset for following uploads.\r\n         */ \r\n\r\n        /* No \"load more\" button if characters ended */\r\n        let ended = false;\r\n        if (newCharacters.length < charactersPerLoad) {\r\n            ended = true;\r\n        }\r\n        \r\n        setCharacters(characters => [...characters, ...newCharacters]);\r\n        setCharactersEnded(ended);\r\n        setOffset(offset => offset + charactersPerLoad);       \r\n    }\r\n\r\n    const onLoadCharacters = (offset) => {\r\n        /**\r\n         * Gets data (array) from Marvel API on additional\r\n         * 9 characters and saves it to the state \r\n         * of this component.\r\n         */\r\n        clearError();\r\n\r\n        getAllCharacters(offset)\r\n            .then(onCharactersLoaded);\r\n    }\r\n\r\n    const renderCharacterCards = (characters) => {\r\n        /**\r\n         * Returns character cards elements\r\n         * with data about characters.\r\n         */\r\n        if (!characters) {\r\n            return null;\r\n        }\r\n\r\n        /* Mapping characters to CharacterCard components */\r\n        return characters.map( ({id, name, thumbnail}) => {\r\n            let active = id === activeCharacterCard;\r\n            return <CharacterCard \r\n                        key={id} \r\n                        id={id}\r\n                        name={name} \r\n                        image={thumbnail}\r\n                        onCharacterCardSelected={onCharacterCardSelected}\r\n                        active={active}\r\n                    />;\r\n        });\r\n    }\r\n\r\n    const getContent = () => {\r\n        /**\r\n         * Determines content for rendering\r\n         * depending on error and loaded status.\r\n         */\r\n        const characterCards = renderCharacterCards(characters);\r\n\r\n        /* Return content */\r\n        return (\r\n            error ? \r\n                <ErrorView message={errorMessage} flex=\"column\" /> \r\n                : loaded ? \r\n                    characterCards \r\n                    : (<> {characterCards} <Spinner/> </>)\r\n        );\r\n    }\r\n\r\n    /* Rendering */\r\n\r\n    const content = getContent();\r\n\r\n    return (\r\n        <div className=\"characters-section\">\r\n            <ul className=\"characters-section__list\">\r\n                {content}\r\n            </ul>\r\n\r\n            <button \r\n                className=\"app-button app-button_main app-button_wide\"\r\n                disabled={newItemsLoading}\r\n                style={{'display': charactersEnded ? 'none' : 'block'}}\r\n                onClick={() => onLoadCharacters(offset)}\r\n                >\r\n                    Load More\r\n            </button>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nCharactersList.propTypes = {\r\n    activeCharacterCard: PropTypes.number,\r\n    onCharacterCardSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharactersList;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <div className=\"character__skeleton\">\r\n            <p className=\"character__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import {useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelAPIService from '../../services/marvel-api-service';\r\nimport ErrorView from '../error-view/error-view';\r\nimport Spinner from '../spinner/spinner';\r\nimport Skeleton from '../skeleton/skeleton';\r\n\r\nimport './character-details.scss';\r\n\r\nconst CharacterDetails = (props) => {\r\n    const {characterId} = props;\r\n\r\n    /* Initializing instances to communicate with Marvel API and work with 'loaded' and 'error' states */\r\n    const {loaded, error, errorMessage, getCharacter, clearError} = useMarvelAPIService(true);\r\n\r\n    /* Component states */\r\n    const [character, setCharacter] = useState(null);\r\n\r\n    /* Component logic */\r\n\r\n    useEffect(() => {\r\n        getCharacterDetails(characterId);\r\n    }, [characterId]);\r\n\r\n    const onCharacterLoaded = (character) => {\r\n        /**\r\n         * Saves character data to state\r\n         * of this component.\r\n         */\r\n        setCharacter(character);\r\n    }\r\n\r\n    const getCharacterDetails = (id) => {\r\n        /**\r\n         * Gets data (object) from Marvel API on selected character\r\n         * and saves it to the state of this component.\r\n         */\r\n        if (!id) {\r\n            return;\r\n        }\r\n        \r\n        clearError();\r\n        setCharacter(null);\r\n        getCharacter(id)\r\n            .then(onCharacterLoaded);\r\n    }\r\n\r\n    const getContent = () => {\r\n        /**\r\n         * Returns different content for rendering\r\n         * depending on error and loaded status.\r\n         */\r\n        return (\r\n            error ? \r\n                <ErrorView message={errorMessage} flex=\"row\" /> \r\n                : loaded ? \r\n                    <CharacterDetailsView character={character}/>\r\n                        : <Spinner/>\r\n        );\r\n    }\r\n\r\n    /* Rendering */\r\n\r\n    const content = getContent();\r\n\r\n    const characterComics = character?.comics?.map((item, i) => {\r\n        return <CharacterComicsView key={i} name={item.name}/>\r\n    });\r\n\r\n    const comicsContent = characterComics && characterComics.length > 0 ? \r\n                            (<><h5>Comics:</h5> {characterComics}</>) \r\n                            : null;\r\n\r\n    return (\r\n        <div className=\"character-info\">\r\n            {content}\r\n            <ul className=\"character-info__comics\">\r\n                {comicsContent}\r\n            </ul>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nconst CharacterDetailsView = ({character}) => {\r\n    /**\r\n     * Returns element with character details.\r\n     * If no character chosen, returns default skeleton.\r\n     */\r\n    if (!character) {\r\n        return <Skeleton/>;\r\n    }\r\n\r\n    const {name, thumbnail, description, homepage, wiki} = character;\r\n\r\n    /* Change styles for a \"not found\" image */\r\n    const imageNotFound = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\";\r\n    let imageClassNames = \"character-info__image\";\r\n    if (thumbnail === imageNotFound) {\r\n        imageClassNames += \" character-info__image_contain\";\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"character-info__header\">\r\n                    <div className={imageClassNames}>\r\n                        <img src={thumbnail} alt=\"Character Portrait\"/>\r\n                    </div>\r\n    \r\n                    <div className=\"character-info__main\">\r\n                        <h3 className=\"character-info__name\">{name}</h3>\r\n    \r\n                        <div className=\"character-info__links\">\r\n                            <a href={homepage} className=\"app-button app-button_main app-button_mb10\">Homepage</a>\r\n                            <a href={wiki} className=\"app-button\">Wiki</a>\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n    \r\n            <article className=\"character-info__bio\">\r\n                {description}\r\n            </article>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst CharacterComicsView = (props) => {\r\n    return (\r\n        <li className=\"character-info__single-comics\">\r\n            {props.name}\r\n        </li>\r\n    );\r\n}\r\n\r\nCharacterDetails.propTypes = {\r\n    characterId: PropTypes.number\r\n}\r\n\r\nexport default CharacterDetails;","import {Component} from 'react';\r\n\r\nimport ErrorView from '../error-view/error-view';\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false,\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({\r\n            error: true\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorView message=\"Something went wrong. Please try again later\" />\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/bottom_bg.4d6f9671.png\";","import { useState } from 'react';\r\n\r\nimport RandomCharacter from '../random-character/random-character';\r\nimport CharactersList from '../characters-list/characters-list';\r\nimport CharacterDetails from '../character-details/character-details';\r\nimport ErrorBoundary from '../error-boundary/error-boundary';\r\n\r\nimport vision from '../../static/img/bottom_bg.png';\r\n\r\nconst CharactersPage = () => {\r\n    const [activeCharacterCard, setActiveCharacterCard] = useState(null);\r\n\r\n    const onCharacterCardSelected = (id) => {\r\n        setActiveCharacterCard(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomCharacter />\r\n            </ErrorBoundary>\r\n            \r\n            <div className=\"characters-container\">\r\n                <ErrorBoundary>\r\n                    <CharactersList \r\n                        activeCharacterCard={activeCharacterCard} \r\n                        onCharacterCardSelected={onCharacterCardSelected}\r\n                    />\r\n                </ErrorBoundary>\r\n                \r\n                <ErrorBoundary>\r\n                    <CharacterDetails characterId={activeCharacterCard}/>\r\n                </ErrorBoundary>\r\n            </div>\r\n\r\n            <div className=\"bg-decoration\">\r\n                <img \r\n                    src={vision} \r\n                    alt=\"Vision Character in Attacking Pose\" \r\n                    className=\"bg-decoration__image\"\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CharactersPage;","export default __webpack_public_path__ + \"static/media/Avengers.c29e0ef0.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9b944f71.png\";","import './app-banner.scss';\r\n\r\nimport avengers from '../../static/img/Avengers.png';\r\nimport logo from '../../static/img/Avengers_logo.png';\r\n\r\nconst AppBanner = () => {\r\n    return (\r\n        <div className=\"banner\">\r\n            <div className=\"banner__image\">\r\n                <img src={avengers} alt=\"Avengers\"/>\r\n            </div>\r\n\r\n            <div className=\"banner__text\">\r\n                <p>New comics every week!</p>\r\n                <p>Stay tuned!</p>\r\n            </div>\r\n\r\n            <div className=\"banner__image\">\r\n                <img src={logo} alt=\"Avengers Logo\"/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppBanner;","import { Link } from 'react-router-dom';\r\n\r\nimport './comics-card.scss';\r\n\r\nconst ComicsCard = (props) => {\r\n    const {id, title, price, image} = props;\r\n\r\n    /* Change styles for a \"not found\" image */\r\n    const imageNotFound = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\";\r\n    let imageClassNames = \"comics-card__image\";\r\n    if (image === imageNotFound) {\r\n        imageClassNames += \" comics-card__image_fill\";\r\n    }\r\n\r\n    return (\r\n        <li \r\n            className='comics-card'\r\n            tabIndex=\"0\"\r\n            id={id}\r\n        >\r\n            <Link to={`/marvel-wiki-portal/comics/${id}`}>\r\n                <div className={imageClassNames}>\r\n                    <img src={image} alt={`Cover of ${title} comics`} />\r\n                </div>\r\n\r\n                <div className=\"comics-card__details\">\r\n                    <h3 className=\"comics-card__title\">{title}</h3>\r\n                    <span className=\"comics-card__price\">{price}</span>\r\n                </div>\r\n            </Link>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default ComicsCard;","import {useState, useEffect} from 'react';\r\n\r\nimport useMarvelAPIService from '../../services/marvel-api-service';\r\n\r\nimport ComicsCard from '../comics-card/comics-card';\r\nimport ErrorView from '../error-view/error-view';\r\nimport Spinner from '../spinner/spinner';\r\n\r\nimport './comics-list.scss';\r\n\r\nconst ComicsList = () => {\r\n    /* Initializing instances to communicate with Marvel API */\r\n    const marvelService = useMarvelAPIService();\r\n    const comicsPerLoad = marvelService._baseComicsLimit;\r\n    const {loaded, error, errorMessage, newItemsLoading, clearError, getAllComics} = marvelService;\r\n    /* Component states */\r\n    const [comics, setComics] = useState([]);\r\n    const [comicsEnded, setComicsEnded] = useState(false);\r\n    const [offset, setOffset] = useState(0);\r\n\r\n    /* Component logic */\r\n    useEffect(() => {\r\n        onLoadComics();\r\n    }, []);\r\n\r\n    const onComicsLoaded = (newComics) => {\r\n        /**\r\n         * Saves newly uploaded comics data \r\n         * to the state of this component.\r\n         * And updates offset for following uploads.\r\n         */ \r\n\r\n        /* No \"load more\" button if characters ended */\r\n        let ended = false;\r\n        if (newComics.length < comicsPerLoad) {\r\n            ended = true;\r\n        }\r\n        \r\n        setComics(comics => [...comics, ...newComics]);\r\n        setComicsEnded(ended);\r\n        setOffset(offset => offset + comicsPerLoad);       \r\n    }\r\n\r\n    const onLoadComics = (offset) => {\r\n        /**\r\n         * Gets data (array) from Marvel API on additional\r\n         * 8 comics and saves it to the state \r\n         * of this component.\r\n         */\r\n        clearError();\r\n\r\n        getAllComics(offset)\r\n            .then(onComicsLoaded);\r\n    }\r\n\r\n    const renderComicsCards = (comics) => {\r\n        /**\r\n         * Returns comics cards elements\r\n         * with data about comics.\r\n         */\r\n        if (!comics) {\r\n            return null;\r\n        }\r\n\r\n        /* Mapping comics to ComicsCard components */\r\n        return comics.map( ({id, title, price, thumbnail}, i) => {\r\n            return <ComicsCard \r\n                        key={i} \r\n                        id={id}\r\n                        title={title} \r\n                        image={thumbnail}\r\n                        price={price}\r\n                    />;\r\n        });\r\n    }\r\n\r\n    const getContent = () => {\r\n        /**\r\n         * Determines content for rendering\r\n         * depending on error and loaded status.\r\n         */\r\n        const comicsCards = renderComicsCards(comics);\r\n\r\n        /* Return content */\r\n        return (\r\n            error ? \r\n                <ErrorView message={errorMessage} flex=\"column\" /> \r\n                : loaded ? \r\n                    comicsCards \r\n                    : (<> {comicsCards} <Spinner/> </>)\r\n        );\r\n    }\r\n\r\n    /* Rendering */\r\n\r\n    const content = getContent();\r\n\r\n    return (\r\n        <div className=\"comics-section\">\r\n            <ul className=\"comics-section__list\">\r\n                {content}\r\n            </ul>\r\n\r\n            <button \r\n                className=\"app-button app-button_main app-button_wide\"\r\n                disabled={newItemsLoading}\r\n                style={{'display': comicsEnded ? 'none' : 'block'}}\r\n                onClick={() => onLoadComics(offset)}\r\n                >\r\n                    Load More\r\n            </button>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default ComicsList;","import AppBanner from '../app-banner/app-banner';\r\nimport ComicsList from '../comics-list/comics-list';\r\nimport ErrorBoundary from '../error-boundary/error-boundary';\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <AppBanner/>\r\n            <ErrorBoundary>\r\n                <ComicsList />\r\n            </ErrorBoundary>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ComicsPage;","import { useState, useEffect } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\n\r\nimport AppBanner from '../../app-banner/app-banner';\r\nimport useMarvelAPIService from '../../../services/marvel-api-service';\r\nimport ErrorBoundary from '../../error-boundary/error-boundary';\r\nimport ErrorView from '../../error-view/error-view';\r\nimport Spinner from '../../spinner/spinner';\r\n\r\nimport './comics-details.scss';\r\n\r\n\r\nconst ComicsDetails = () => {\r\n    let { comicsId } = useParams();\r\n\r\n    /* Initializing instances to communicate with Marvel API and work with 'loaded' and 'error' states */\r\n    const {loaded, error, errorMessage, getSingleComics, clearError} = useMarvelAPIService();\r\n\r\n    /* Component states */\r\n    const [comics, setComics] = useState(null);\r\n\r\n    /* Component logic */\r\n    useEffect(() => {\r\n        getComicsDetails(comicsId);\r\n    }, [comicsId]);\r\n\r\n    const onComicsLoaded = (comics) => {\r\n        /**\r\n         * Saves comics data to state\r\n         * of this component.\r\n         */\r\n        setComics(comics);\r\n    }\r\n\r\n    const getComicsDetails = (id) => {\r\n        /**\r\n         * Gets data (object) from Marvel API on selected comics\r\n         * and saves it to the state of this component.\r\n         */\r\n        clearError();\r\n        getSingleComics(id)\r\n            .then(onComicsLoaded);\r\n    }\r\n\r\n    const getContent = () => {\r\n        /**\r\n         * Returns different content for rendering\r\n         * depending on error and loaded status.\r\n         */\r\n        return (\r\n            error ? \r\n                <ErrorView message={errorMessage} /> \r\n                : loaded ? \r\n                    <ComicsDetailsView comics={comics}/>\r\n                        : <Spinner/>\r\n        );\r\n    }\r\n\r\n    /* Rendering */\r\n\r\n    const content = getContent();\r\n\r\n    return (\r\n        <>\r\n            <AppBanner/>\r\n            <ErrorBoundary>\r\n                {content}\r\n            </ErrorBoundary>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst ComicsDetailsView = ({comics}) => {\r\n    /**\r\n     * Returns element with comics details.\r\n     * If no comics chosen, returns null.\r\n     */\r\n    if (!comics) {\r\n        return null;\r\n    }\r\n\r\n    const {title, thumbnail, pages, price, description, language} = comics;\r\n\r\n    /* Change styles for a \"not found\" image */\r\n    const imageNotFound = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\";\r\n    let imageClassNames = \"comics-info__image\";\r\n    if (thumbnail === imageNotFound) {\r\n        imageClassNames += \" comics-info__image_fill\";\r\n    }\r\n    \r\n    return (\r\n        <div className=\"comics-info\">\r\n            <div className={imageClassNames}>\r\n                <img src={thumbnail} alt={`Cover of ${title} comics`}/>\r\n            </div>\r\n\r\n            <div className=\"comics-info__main\">\r\n                <h3 className=\"comics-info__title\">{title}</h3>\r\n\r\n                <article className=\"comics-info__description\">\r\n                    {description}\r\n                </article>\r\n\r\n                <div className=\"comics-info__pages\">{pages}</div>\r\n\r\n                <div className=\"comics-info__lang\">Language: {language}</div>\r\n\r\n                <span className=\"comics-info__price\">{price}</span>\r\n            </div>\r\n\r\n            <div className=\"comics-info__links\">\r\n                <Link to=\"/marvel-wiki-portal/comics\" className=\"comics-info__link\">Back to all</Link>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ComicsDetails;","import { Link } from \"react-router-dom\";\r\n\r\nimport ErrorView from '../error-view/error-view';\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <div>\r\n            <ErrorView message=\"404 Page Not Found\" />\r\n            <Link to=\"/\" className=\"app-button app-button_main app-button_wide\">Back to Main Page</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NotFound;","import { Link, NavLink } from 'react-router-dom';\r\n\r\nimport './app-header.scss';\r\n\r\nconst AppHeader = () => {    \r\n    return (\r\n        <header className=\"app-header\">\r\n            <h1 className=\"app-name\">\r\n                <Link to=\"/marvel-wiki-portal\">\r\n                <span className=\"app-name__main-title\">Marvel</span> Wiki Portal\r\n                </Link>\r\n            </h1>\r\n\r\n            <nav className=\"app-menu\">\r\n                <ul className=\"app-menu__list\">\r\n                    <li className='app-menu__item'>\r\n                        <NavLink end to=\"/marvel-wiki-portal\">Characters</NavLink>\r\n                    </li>\r\n                    /\r\n                    <li className='app-menu__item'>\r\n                        <NavLink to=\"/marvel-wiki-portal/comics\">Comics</NavLink>\r\n                    </li>\r\n                </ul>\r\n\r\n            </nav>\r\n\r\n        </header>\r\n    );\r\n\r\n}\r\n\r\nexport default AppHeader;","import { \n  BrowserRouter as Router, \n  Route, \n  Routes \n} from 'react-router-dom';\n\n/* Pages */\nimport {\n  CharactersPage, \n  ComicsPage,\n  ComicsDetails,\n  NotFound\n} from '../pages';\n\n/* Other Components */\nimport AppHeader from '../app-header/app-header';\n\n/* Styles */\nimport './app.scss';\n\nconst App = () => {\n\n  return (\n    <Router>\n      <div className=\"app-container\">\n        <AppHeader />\n        <main>\n          <Routes>\n            <Route path=\"/marvel-wiki-portal\" element={<CharactersPage/>} />\n            <Route path=\"/marvel-wiki-portal/comics\" element={<ComicsPage/>} />\n            <Route path=\"/marvel-wiki-portal/comics/:comicsId\" element={<ComicsDetails/>} />\n            <Route path=\"/marvel-wiki-portal/*\" element={<NotFound />}/>\n          </Routes>\n        </main>\n        <footer>\n          Data provided by Marvel. © 2014 Marvel\n        </footer>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/app/app';\n\nimport './index.scss';\nimport './button.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}