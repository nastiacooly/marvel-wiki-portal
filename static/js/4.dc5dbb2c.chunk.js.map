{"version":3,"sources":["components/error-view/error-view.js","hooks/http.hook.js","services/api-key.js","services/marvel-api-service.js","components/error-boundary/error-boundary.js","components/random-character/random-character.js","components/character-card/character-card.js","components/characters-list/characters-list.js","components/skeleton/skeleton.js","components/character-details/character-details.js","static/img/bottom_bg.png","components/pages/characters-page.js"],"names":["ErrorView","className","error","errorMessage","flex","ErrorIcon","viewBox","y","x","xmlns","version","style","height","width","background","transformOrigin","transform","fill","d","attributeName","type","dur","repeatCount","keyTimes","values","begin","defaultProps","useHttp","initialLoadedState","useState","loaded","setLoaded","setError","setErrorMessage","newItemsLoading","setNewItemsLoading","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","clearError","publicApiKey","useMarvelAPIService","_apiBase","_apiKeyBase","_baseCharactersOffset","_baseCharactersLimit","_baseComicsLimit","_apiUrls","allCharacters","singleCharacter","allComics","singleComics","getAllCharacters","offset","results","map","_transformCharacterData","getCharacter","id","toString","length","characterMainData","getAllComics","_transformComicsData","getSingleComics","comicsMainData","getCharacterComics","character","noDescriptionMessage","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","price","prices","pages","pageCount","title","language","textObjects","ErrorBoundary","state","errorInfo","this","setState","message","props","children","Component","CharacterView","imageClassNames","src","alt","href","RandomCharacter","setCharacter","useEffect","getRandomCharacter","onCharacterLoaded","minId","randomId","Math","floor","random","then","onClick","CharacterCard","image","onCharacterCardSelected","classNames","active","tabIndex","onKeyPress","e","key","CharactersList","activeCharacterCard","marvelService","baseOffset","charactersPerLoad","characters","setCharacters","charactersEnded","setCharactersEnded","setOffset","onLoadCharacters","onCharactersLoaded","newCharacters","ended","characterCards","activeCardId","mapToCharacterCards","disabled","Skeleton","CharacterDetailsView","Object","keys","CharacterComicsView","characterComics","to","CharacterDetails","characterId","characterInfoRef","useRef","setCharacterComics","getCharacterDetails","onCharacterSelected","clientCoords","current","getBoundingClientRect","scrollTop","window","scrollY","top","scrollTo","onCharacterComicsLoaded","ref","CharactersPage","setActiveCharacterCard","vision"],"mappings":"+HAEA,iBAEMA,EAAY,SAAC,GAAiC,IAK5CC,EALYC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,aAAcC,EAAU,EAAVA,KACrC,IAAKF,EACD,OAAO,KAIX,OAAOE,GACH,IAAK,SACDH,EAAY,iCACZ,MACJ,IAAK,MACDA,EAAY,8BACZ,MACJ,QACIA,EAAY,aAGpB,OACI,sBAAKA,UAAWA,EAAhB,UACI,cAACI,EAAD,IACA,mBAAGJ,UAAU,sBAAb,SAAoCE,QAK1CE,EAAY,WACd,OACI,qBACIC,QAAQ,cACRC,EAAE,IACFC,EAAE,IACFC,MAAM,6BACNC,QAAQ,MACRC,MAAO,CAACC,OAAQ,QAASC,MAAO,QAASC,WAAY,QACrDD,MAAM,QACND,OAAO,QARX,SASQ,mBAAGX,UAAU,YACTU,MAAO,CAACI,gBAAiB,UAAWC,UAAW,mBADnD,SAEA,oBAAGf,UAAU,UAAb,UACA,mBAAGA,UAAU,YAAb,SACA,mBAAGA,UAAU,UACTU,MAAO,CAACI,gBAAiB,YAAaC,UAAW,eADrD,SAEI,sBAAMC,KAAK,UAAUC,EAAE,8UAA8UP,MAAO,CAACM,KAAM,mBAAnX,SACA,kCAAkBE,cAAc,YAAYC,KAAK,QAAQC,IAAI,KAAKC,YAAY,aAAaC,SAAS,YAAYC,OAAO,gCAG3H,mBAAGvB,UAAU,YAAb,SACA,mBAAGA,UAAU,UACTU,MAAO,CAACI,gBAAiB,YAAaC,UAAW,eADrD,SAEI,sBAAMC,KAAK,UAAUC,EAAE,6UAA6UP,MAAO,CAACM,KAAM,mBAAlX,SACA,kCAAkBE,cAAc,YAAYC,KAAK,QAAQC,IAAI,KAAKI,MAAM,OAAOH,YAAY,aAAaC,SAAS,YAAYC,OAAO,oCAcxJxB,EAAU0B,aAAe,CACrBxB,OAAO,EACPC,aAAc,gDAGHH,O,gGCtBA2B,EAjDC,WAAiC,IAAhCC,EAA+B,wDAM5C,EAA4BC,mBAASD,GAArC,mBAAOE,EAAP,KAAeC,EAAf,KACA,EAA0BF,oBAAS,GAAnC,mBAAO3B,EAAP,KAAc8B,EAAd,KACA,EAAwCH,mBAAS,IAAjD,mBAAO1B,EAAP,KAAqB8B,EAArB,KACA,EAA8CJ,oBAAS,GAAvD,mBAAOK,EAAP,KAAwBC,EAAxB,KAEMC,EAAUC,sBAAW,uCAAE,WAAOC,GAAP,mCAAAC,EAAA,6DAAYC,EAAZ,+BAAmB,MAAOC,EAA1B,+BAA+B,KAAMC,EAArC,+BAA6C,CAAC,eAAgB,oBACvFX,GAAU,GACVC,GAAS,GACTG,GAAmB,GAHM,kBAMEQ,MAAML,EAAK,CAACE,SAAQC,OAAMC,YAN5B,WAMfE,EANe,QAQPC,GARO,uBASX,IAAIC,MAAJ,0BAA6BR,EAA7B,qBAA6CM,EAASG,SAT3C,yBAYFH,EAASI,OAZP,eAYfC,EAZe,OAcrBlB,GAAU,GACVC,GAAS,GACTG,GAAmB,GAhBE,kBAiBdc,GAjBc,wCAoBrBlB,GAAU,GACVC,GAAS,GACTG,GAAmB,GACnBF,EAAgB,iDAvBK,+DAAF,sDA2BxB,IAEGiB,EAAab,uBAAY,WAC3BL,GAAS,GACTC,EAAgB,MACjB,IAEH,MAAO,CAACH,SAAQ5B,QAAOC,eAAc+B,kBAAiBE,UAASc,eC7CpDC,EAFM,mCCqLNC,IAjLa,WAAiC,IAAhCxB,EAA+B,wDAOxD,EAA2DD,EAAQC,GAA5DE,EAAP,EAAOA,OAAQ5B,EAAf,EAAeA,MAAOC,EAAtB,EAAsBA,aAAciC,EAApC,EAAoCA,QAASc,EAA7C,EAA6CA,WAEvCG,EAAW,2CACXC,EAAc,UACdC,EAAwB,IACxBC,EAAuB,EACvBC,EAAmB,EACnBC,EAAW,CACbC,cAAc,GAAD,OAAKN,EAAL,gBACbO,gBAAgB,GAAD,OAAKP,EAAL,gBACfQ,UAAU,GAAD,OAAKR,EAAL,YACTS,aAAa,GAAD,OAAKT,EAAL,aAGVU,EAAgB,uCAAG,0CAAAxB,EAAA,6DAAOyB,EAAP,+BAAgBT,EAAhB,SAQEnB,EACnBsB,EAASC,cAAT,gBACWH,EADX,mBAC0CQ,EAD1C,YACoDV,GADpD,OACkEH,IAVjD,cAQfP,EARe,yBAYdA,EAASK,KAAKgB,QAAQC,IAAIC,IAZZ,2CAAH,qDAehBC,EAAY,uCAAG,WAAOC,GAAP,iBAAA9B,EAAA,2DAOb8B,EAAGC,WAAWC,OAAS,GAPV,sBAQP,IAAIzB,MAAM,6BARH,uBAUMV,EACnBsB,EAASE,gBACPS,EACA,IACAf,EACAH,GAfW,cAUXP,EAVW,OAiBX4B,EAAoB5B,EAASK,KAAKgB,QAAQ,GAjB/B,kBAkBVE,EAAwBK,IAlBd,2CAAH,sDAqBZC,EAAY,uCAAG,0CAAAlC,EAAA,6DAAOyB,EAAP,+BAAgB,EAAhB,SAOM5B,EACnBsB,EAASG,UAAT,gBACWJ,EADX,mBACsCO,EADtC,YACgDV,GADhD,OAC8DH,IATjD,cAOXP,EAPW,yBAYVA,EAASK,KAAKgB,QAAQC,IAAIQ,IAZhB,2CAAH,qDAeZC,EAAe,uCAAG,WAAON,GAAP,iBAAA9B,EAAA,sEAOGH,EACnBsB,EAASI,aACPO,EACA,IACAf,EACAH,GAZc,cAOdP,EAPc,OAcdgC,EAAiBhC,EAASK,KAAKgB,QAAQ,GAdzB,kBAebS,EAAqBE,IAfR,2CAAH,sDAkBfC,EAAkB,uCAAG,WAAOR,GAAP,eAAA9B,EAAA,2DAQnB8B,EAAGC,WAAWC,OAAS,GARJ,sBASb,IAAIzB,MAAM,6BATG,uBAWAV,EACnBsB,EAASE,gBACPS,EACA,WACAf,EACAH,GAhBiB,cAWjBP,EAXiB,yBAmBhBA,EAASK,KAAKgB,QAAQC,IAAIQ,IAnBV,2CAAH,sDAsBlBP,EAA0B,SAACW,GAO7B,IAAMC,EAAoB,kFACsCD,EAAUE,KADhD,kBAGtBC,EAAcH,EAAUG,aAAeF,EAM3C,OAJIE,EAAYV,QAAU,MACtBU,EAAcA,EAAYC,MAAM,EAAG,KAAO,OAGvC,CACHb,GAAIS,EAAUT,GACdW,KAAMF,EAAUE,KAChBC,YAAaA,EACbE,UAAWL,EAAUK,UAAUC,KAAO,IAAMN,EAAUK,UAAUE,UAChEC,SAAUR,EAAUS,KAAK,GAAGjD,IAC5BkD,KAAMV,EAAUS,KAAK,GAAGjD,MAI1BoC,EAAuB,SAACe,GAO1B,IAAMC,EAAQD,EAAOE,OAAO,GAAGD,MAAjB,UAA4BD,EAAOE,OAAO,GAAGD,MAA7C,KAAwD,sBAGhEE,EAAQH,EAAOI,UAAP,UAAsBJ,EAAOI,UAA7B,UAAiD,0BAE/D,MAAO,CACHxB,GAAIoB,EAAOpB,GACXyB,MAAOL,EAAOK,MACdb,YAAaQ,EAAOR,aAAe,2BACnCS,MAAOA,EACPP,UAAWM,EAAON,UAAUC,KAAO,IAAMK,EAAON,UAAUE,UAC1DO,MAAOA,EACPG,SAAUN,EAAOO,YAAYD,UAAY,UAIjD,MAAO,CACHvC,uBACAD,wBACAE,mBACA3B,SACA5B,QACAC,eACA+C,aACAa,mBACAK,eACAK,eACAE,kBACAE,wB,0FC7KFoB,E,4MACFC,MAAQ,CACJhG,OAAO,G,uDAGX,SAAkBA,EAAOiG,GACrBC,KAAKC,SAAS,CACVnG,OAAO,M,oBAIf,WACI,OAAIkG,KAAKF,MAAMhG,MACJ,cAAC,IAAD,CAAWoG,QAAQ,iDAGvBF,KAAKG,MAAMC,a,GAhBEC,aAoBbR,O,8MCuDTS,EAAgB,SAAC,GAAiB,IAAhB5B,EAAe,EAAfA,UACpB,IAAKA,EACD,OAAO,KAGX,IAAOE,EAAgDF,EAAhDE,KAAMG,EAA0CL,EAA1CK,UAAWF,EAA+BH,EAA/BG,YAAaK,EAAkBR,EAAlBQ,SAAUE,EAAQV,EAARU,KAI3CmB,EAAkB,0BAKtB,MANsB,wEAElBxB,IACAwB,GAAmB,oCAInB,qCACI,qBAAK1G,UAAW0G,EAAhB,SACI,qBAAKC,IAAKzB,EAAW0B,IAAI,uBAG7B,sBAAK5G,UAAU,4BAAf,UACI,oBAAIA,UAAU,yBAAd,SACK+E,IAEL,mBAAG/E,UAAU,0BAAb,SACKgF,IAEL,sBAAKhF,UAAU,0BAAf,UACI,mBAAG6G,KAAMxB,EAAUrF,UAAU,6BAA7B,sBACA,mBAAG6G,KAAMtB,EAAMvF,UAAU,aAAzB,4BAOL8G,EAzGS,WAEpB,MAAgE3D,cAAzDtB,EAAP,EAAOA,OAAQ5B,EAAf,EAAeA,MAAOC,EAAtB,EAAsBA,aAAciE,EAApC,EAAoCA,aAAclB,EAAlD,EAAkDA,WAGlD,EAAkCrB,mBAAS,MAA3C,mBAAOiD,EAAP,KAAkBkC,EAAlB,KAIAC,qBAAU,WAENC,MACD,IAEH,IAAMC,EAAoB,SAACrC,GAKvBkC,EAAalC,IAGXoC,EAAqB,WAKvBhE,IACA8D,EAAa,MAEb,IACMI,EAAQ,OACRC,EAAWC,KAAKC,MAAMH,EAAQ,IAAAE,KAAKE,UAEzCpD,EAAaiD,GACRI,KAAKN,IAGd,OACI,0BAASlH,UAAU,iBAAnB,UAEI,sBAAKA,UAAU,mBAAf,UACI,cAAC,EAAD,CAAe6E,UAAWA,IAC1B,cAAC,IAAD,CAAShD,OAAQA,IACjB,cAAC,IAAD,CAAW5B,MAAOA,EAAOC,aAAcA,EAAcC,KAAK,WAG9D,sBAAKH,UAAU,gBAAf,UACI,oBAAGA,UAAU,sBAAb,wCAC+B,uBAD/B,4CAKA,gCACI,mBAAGA,UAAU,mDAAb,mCACA,wBACIA,UAAU,mDACVyH,QAASR,EAFb,8B,QCrBLS,G,MAxCO,SAACpB,GACnB,IAAOlC,EAAoDkC,EAApDlC,GAAIuD,EAAgDrB,EAAhDqB,MAAO5C,EAAyCuB,EAAzCvB,KAAM6C,EAAmCtB,EAAnCsB,wBAIpBlB,EAAkB,wBADA,wEAElBiB,IACAjB,GAAmB,kCAIvB,IAAImB,EAVuDvB,EAAVwB,OAUvB,uCAAyC,iBAEnE,OACI,qBACI9H,UAAW6H,EACXE,SAAS,IACTN,QAAS,kBAAMG,EAAwBxD,IACvC4D,WAAY,SAACC,GACK,MAAVA,EAAEC,KAAyB,UAAVD,EAAEC,KACnBN,EAAwBxD,IANpC,UAUQ,qBAAKpE,UAAW0G,EAAhB,SACI,qBAAKC,IAAKgB,EAAOf,IAAI,gCAGzB,qBAAK5G,UAAU,0BAAf,SACI,oBAAIA,UAAU,uBAAd,SAAsC+E,WCiF3CoD,G,MA7EQ,SAAC7B,GACpB,IAAOsB,EAAgDtB,EAAhDsB,wBAAyBQ,EAAuB9B,EAAvB8B,oBAE1BC,EAAgBlF,cAChBmF,EAAaD,EAAc/E,sBAC3BiF,EAAoBF,EAAc9E,qBACjC1B,EAA8EwG,EAA9ExG,OAAQ5B,EAAsEoI,EAAtEpI,MAAOC,EAA+DmI,EAA/DnI,aAAc+B,EAAiDoG,EAAjDpG,gBAAiBgB,EAAgCoF,EAAhCpF,WAAYa,EAAoBuE,EAApBvE,iBAEjE,EAAoClC,mBAAS,IAA7C,mBAAO4G,EAAP,KAAmBC,EAAnB,KACA,EAA8C7G,oBAAS,GAAvD,mBAAO8G,EAAP,KAAwBC,EAAxB,KACA,EAA4B/G,mBAAS0G,GAArC,mBAAOvE,EAAP,KAAe6E,EAAf,KAGA5B,qBAAU,WACN6B,MACD,IAEH,IAAMC,EAAqB,SAACC,GAQxB,IAAIC,GAAQ,EACRD,EAAczE,OAASiE,IACvBS,GAAQ,GAGZP,GAAc,SAAAD,GAAU,4BAAQA,GAAR,YAAuBO,OAC/CJ,EAAmBK,GACnBJ,GAAU,SAAA7E,GAAM,OAAIA,EAASwE,MAG3BM,EAAmB,SAAC9E,GAMtBd,IAEAa,EAAiBC,GACZyD,KAAKsB,IAIRG,EAzEkB,SAACT,EAAYU,EAActB,GAMnD,OAAKY,EAKEA,EAAWvE,KAAK,YAA4B,IAA1BG,EAAyB,EAAzBA,GAAIW,EAAqB,EAArBA,KAAMG,EAAe,EAAfA,UAC3B4C,EAAS1D,IAAO8E,EACpB,OAAO,cAAC,EAAD,CAEK9E,GAAIA,EACJW,KAAMA,EACN4C,MAAOzC,EACP0C,wBAAyBA,EACzBE,OAAQA,GALH1D,MAPV,KAkEY+E,CAAoBX,EAAYJ,EAAqBR,GAE5E,OACI,sBAAK5H,UAAU,qBAAf,UACI,qBAAIA,UAAU,2BAAd,UACKiJ,EACD,cAAC,IAAD,CAASpH,OAAQA,IACjB,cAAC,IAAD,CAAW5B,MAAOA,EAAOC,aAAcA,EAAcC,KAAK,cAG9D,wBACIH,UAAU,6CACVoJ,SAAUnH,EACVvB,MAAO,CAAC,QAAWgI,EAAkB,OAAS,SAC9CjB,QAAS,kBAAMoB,EAAiB9E,IAJpC,4B,OC5EGsF,G,MAjBE,WACb,OACI,sBAAKrJ,UAAU,sBAAf,UACI,mBAAGA,UAAU,oBAAb,0DACA,sBAAKA,UAAU,WAAf,UACI,sBAAKA,UAAU,yBAAf,UACI,qBAAKA,UAAU,2BACf,qBAAKA,UAAU,4BAEnB,qBAAKA,UAAU,0BACf,qBAAKA,UAAU,0BACf,qBAAKA,UAAU,kCC+EzBsJ,G,MAAuB,SAAC,GAAiB,IAAhBzE,EAAe,EAAfA,UAM3B,IAAKA,EACD,OAAO,cAAC,EAAD,IAIX,GADyD,IAAlC0E,OAAOC,KAAK3E,GAAWP,OAE1C,OAAO,KAGX,IAAOS,EAAgDF,EAAhDE,KAAMG,EAA0CL,EAA1CK,UAAWF,EAA+BH,EAA/BG,YAAaK,EAAkBR,EAAlBQ,SAAUE,EAAQV,EAARU,KAI3CmB,EAAkB,wBAKtB,MANsB,wEAElBxB,IACAwB,GAAmB,kCAInB,qCACI,sBAAK1G,UAAU,yBAAf,UACQ,qBAAKA,UAAW0G,EAAhB,SACI,qBAAKC,IAAKzB,EAAW0B,IAAI,yBAG7B,sBAAK5G,UAAU,uBAAf,UACI,oBAAIA,UAAU,uBAAd,SAAsC+E,IAEtC,sBAAK/E,UAAU,wBAAf,UACI,mBAAG6G,KAAMxB,EAAUrF,UAAU,6CAA7B,sBACA,mBAAG6G,KAAMtB,EAAMvF,UAAU,aAAzB,2BAKhB,yBAASA,UAAU,sBAAnB,SACKgF,SAOXyE,EAAsB,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,gBAC1B,IAAKA,GAA8C,IAA3BA,EAAgBpF,OACpC,OAAO,KAGX,IAAMkB,EAASkE,EAAgBzF,KAAI,YAA6B,IAA3BG,EAA0B,EAA1BA,GAAIyB,EAAsB,EAAtBA,MAAOX,EAAe,EAAfA,UAC5C,OACI,oBAAalF,UAAU,gCAAvB,SACI,eAAC,IAAD,CAAM2J,GAAE,qCAAgCvF,GAAMpE,UAAU,yCAAxD,UACI,6BAAK6F,IACL,8BACI,qBAAKc,IAAKzB,EAAW0B,IAAG,mBAAcf,EAAd,mBAJ3BzB,MAWjB,OAAO,qCAAE,yCAAF,IAAoBoB,MAQhBoE,EA1JU,SAACtD,GACtB,IAAOuD,EAAevD,EAAfuD,YAGDC,EAAmBC,iBAAO,MAGhC,EAAoF5G,aAAoB,GAAjGtB,EAAP,EAAOA,OAAQ5B,EAAf,EAAeA,MAAOC,EAAtB,EAAsBA,aAAciE,EAApC,EAAoCA,aAAcS,EAAlD,EAAkDA,mBAAoB3B,EAAtE,EAAsEA,WAGtE,EAAkCrB,mBAAS,MAA3C,mBAAOiD,EAAP,KAAkBkC,EAAlB,KACA,EAA8CnF,mBAAS,IAAvD,mBAAO8H,EAAP,KAAwBM,EAAxB,KAIAhD,qBAAU,WACNiD,EAAoBJ,GACpBK,MACD,CAACL,IAEJ,IAAMK,EAAsB,WAKxB,IAAIC,EAAeL,EAAiBM,QAAQC,wBACxCC,EAAYC,OAAOC,QAAUL,EAAaM,IAC9CF,OAAOG,SAAS,EAAGJ,IAGjBpD,EAAoB,SAACrC,GAKvBkC,EAAalC,IAGX8F,EAA0B,SAACnF,GAK7BwE,EAAmBxE,IAGjByE,EAAsB,SAAC7F,GAMpBA,IAILnB,IACA8D,EAAa,IACbiD,EAAmB,IACnB7F,EAAaC,GACRoD,KAAKN,GACLM,MAAK,kBAAM5C,EAAmBR,MAC9BoD,KAAKmD,KAGd,OACI,sBAAK3K,UAAU,iBAAiB4K,IAAKd,EAArC,UACI,cAAC,EAAD,CAAsBjF,UAAWA,IACjC,cAAC,IAAD,CAAShD,OAAQA,IACjB,cAAC,IAAD,CAAW5B,MAAOA,EAAOC,aAAcA,EAAcC,KAAK,QAC1D,oBAAIH,UAAU,yBAAd,SACI,cAAC,EAAD,CAAqB0J,gBAAiBA,U,QCpFvC,MAA0B,sCC8C1BmB,UArCQ,WACnB,MAAsDjJ,mBAAS,MAA/D,mBAAOwG,EAAP,KAA4B0C,EAA5B,KAMA,OACI,qCACI,cAAC,IAAD,UACI,cAAC,EAAD,MAGJ,sBAAK9K,UAAU,uBAAf,UACI,cAAC,IAAD,UACI,cAAC,EAAD,CACIoI,oBAAqBA,EACrBR,wBAdY,SAACxD,GAC7B0G,EAAuB1G,QAiBf,cAAC,IAAD,UACI,cAAC,EAAD,CAAkByF,YAAazB,SAIvC,qBAAKpI,UAAU,gBAAf,SACI,qBACI2G,IAAKoE,EACLnE,IAAI,qCACJ5G,UAAU","file":"static/js/4.dc5dbb2c.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nimport './error-view.scss';\r\n\r\nconst ErrorView = ({error, errorMessage, flex}) => {\r\n    if (!error) {\r\n        return null;\r\n    }\r\n\r\n    let className;\r\n    switch(flex) {\r\n        case \"column\":\r\n            className = \"error-view error-view_columned\";\r\n            break;\r\n        case \"row\":\r\n            className = \"error-view error-view_rowed\";\r\n            break;\r\n        default:\r\n            className = \"error-view\";\r\n    }\r\n\r\n    return (\r\n        <div className={className}>\r\n            <ErrorIcon />\r\n            <p className=\"error-view__message\">{errorMessage}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst ErrorIcon = () => {\r\n    return (\r\n        <svg \r\n            viewBox=\"0 0 100 100\" \r\n            y=\"0\" \r\n            x=\"0\" \r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            version=\"1.1\" \r\n            style={{height: '150px', width: '150px', background: 'none'}} \r\n            width=\"150px\" \r\n            height=\"150px\">\r\n                <g className=\"ldl-scale\" \r\n                    style={{transformOrigin: '50% 50%', transform: 'scale(0.8, 0.8)'}}>\r\n                <g className=\"ldl-ani\">\r\n                <g className=\"ldl-layer\">\r\n                <g className=\"ldl-ani\" \r\n                    style={{transformOrigin: '50px 50px', transform: 'scale(0.91)'}}>\r\n                    <path fill=\"#e15b64\" d=\"M14.653 85.487c-3.138-1.806-4.167-6.008-2.198-9.12 8.401-13.282 18.34-25.329 29.177-36.099 10.916-10.864 22.708-20.49 34.913-29.273 2.772-1.995 6.57-1.344 8.557 1.485 1.928 2.744 1.471 6.578-1.06 8.732-11.111 9.456-21.591 19.558-30.95 30.517C43.876 62.5 35.786 74.12 29.248 86.488c-1.653 3.126-5.423 4.276-8.429 2.547l-6.166-3.548z\" style={{fill: 'rgb(159, 0, 19)'}}>\r\n                    <animateTransform attributeName=\"transform\" type=\"scale\" dur=\"2s\" repeatCount=\"indefinite\" keyTimes=\"0; 0.5; 1\" values=\"0.8 0.8; 1 1; 0.8 0.8\"></animateTransform>\r\n                    </path>\r\n                </g></g>\r\n                <g className=\"ldl-layer\">\r\n                <g className=\"ldl-ani\" \r\n                    style={{transformOrigin: '50px 50px', transform: 'scale(0.91)'}}>\r\n                    <path fill=\"#e15b64\" d=\"M78.739 82.438c-3.067 1.804-7.041.872-8.916-2.152-6.367-10.267-14.543-19.718-23.698-28.397-9.306-8.827-19.587-16.906-30.29-24.594a6.594 6.594 0 0 1-1.682-8.948l1.23-1.895a6.609 6.609 0 0 1 9.03-2.012c11.571 7.19 22.962 14.943 33.735 23.864 10.673 8.851 20.777 18.958 29.162 30.721 2.256 3.165 1.337 7.584-2.014 9.555l-6.557 3.858z\" style={{fill: 'rgb(159, 0, 19)'}}>\r\n                    <animateTransform attributeName=\"transform\" type=\"scale\" dur=\"2s\" begin=\"0.5s\" repeatCount=\"indefinite\" keyTimes=\"0; 0.5; 1\" values=\"1 1; 0.8 0.8; 1 1\"></animateTransform>\r\n                    </path>\r\n                </g></g>\r\n                </g></g>\r\n        </svg>\r\n    );\r\n}\r\n\r\nErrorView.propTypes = {\r\n    error: PropTypes.bool.isRequired,\r\n    errorMessage: PropTypes.string.isRequired,\r\n    flex: PropTypes.oneOf(['column', 'row'])\r\n}\r\n\r\nErrorView.defaultProps = {\r\n    error: true,\r\n    errorMessage: \"Something went wrong. Please try again later\"\r\n}\r\n\r\nexport default ErrorView;","import {useState, useCallback} from 'react';\r\n\r\nconst useHttp = (initialLoadedState = false) => {\r\n    /**\r\n     * Custom hook for http-requests.\r\n     * Returns method to get data from url and to set corresponding 'loaded' and 'error' states.\r\n     * Also returns state values and clearError method.\r\n     */\r\n    const [loaded, setLoaded] = useState(initialLoadedState);\r\n    const [error, setError] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [newItemsLoading, setNewItemsLoading] = useState(false);\r\n    \r\n    const request = useCallback( async (url, method=\"GET\", body=null, headers={'Content-type': 'application/json'}) => {\r\n        setLoaded(false);\r\n        setError(false);\r\n        setNewItemsLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoaded(true);\r\n            setError(false);\r\n            setNewItemsLoading(false);\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoaded(true);\r\n            setError(true);\r\n            setNewItemsLoading(false);\r\n            setErrorMessage(\"Something went wrong. Please try again later.\");\r\n            throw(e);\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(false);\r\n        setErrorMessage('');\r\n    }, []);\r\n\r\n    return {loaded, error, errorMessage, newItemsLoading, request, clearError};\r\n\r\n}\r\n\r\nexport default useHttp;","const publicApiKey = \"0cccfebfa143cbee173b3ff218a5afc4\";\r\n\r\nexport default publicApiKey;","import useHttp from '../hooks/http.hook';\r\n\r\nimport publicApiKey from './api-key';\r\n\r\nconst useMarvelAPIService = (initialLoadedState = false) => {\r\n    /**\r\n     * Custom hook to work with Marvel API.\r\n     * Returns methods for getting characters\r\n     * and returns corresponding state values.\r\n     * Based on custom 'useHttp' hook.\r\n     */\r\n    const {loaded, error, errorMessage, request, clearError} = useHttp(initialLoadedState);\r\n\r\n    const _apiBase = \"https://gateway.marvel.com:443/v1/public\";\r\n    const _apiKeyBase = \"apikey=\";\r\n    const _baseCharactersOffset = 210; /* number of characters to pass from the begginnng of the list */\r\n    const _baseCharactersLimit = 9; /* characters per load */\r\n    const _baseComicsLimit = 4; /* comics per load */\r\n    const _apiUrls = {\r\n        allCharacters: `${_apiBase}/characters?`,\r\n        singleCharacter: `${_apiBase}/characters/`,\r\n        allComics: `${_apiBase}/comics?`,\r\n        singleComics: `${_apiBase}/comics/`,\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseCharactersOffset) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on all characters (limited in _baseCharactersLimit).\r\n         * Takes optional argument for characters offset (number).\r\n         * Returns array with all characters with data \r\n         * transformed for each character.\r\n         */\r\n        const response = await request(\r\n            _apiUrls.allCharacters \r\n            + `limit=${_baseCharactersLimit}&offset=${offset}&${_apiKeyBase}${publicApiKey}`\r\n        );\r\n        return response.data.results.map(_transformCharacterData);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on a character by its unique id.\r\n         * Throws error in case of invalid id.\r\n         * Returns JS-object with transformed data.\r\n         */\r\n        if (id.toString().length < 7) {\r\n            throw new Error('Invalid id of a character');\r\n        }\r\n        const response = await request(\r\n            _apiUrls.singleCharacter \r\n            + id \r\n            + \"?\" \r\n            + _apiKeyBase \r\n            + publicApiKey\r\n            );\r\n        const characterMainData = response.data.results[0];\r\n        return _transformCharacterData(characterMainData);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on all comics (limited in _baseComicsLimit).\r\n         * Returns array with all comics with data \r\n         * transformed for each comics.\r\n         */\r\n        const response = await request(\r\n            _apiUrls.allComics \r\n            + `limit=${_baseComicsLimit}&offset=${offset}&${_apiKeyBase}${publicApiKey}`\r\n        );\r\n\r\n        return response.data.results.map(_transformComicsData);\r\n    }\r\n\r\n    const getSingleComics = async (id) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on a comics by its unique id.\r\n         * Throws error in case of invalid id.\r\n         * Returns JS-object with transformed data.\r\n         */\r\n        const response = await request(\r\n            _apiUrls.singleComics \r\n            + id \r\n            + \"?\" \r\n            + _apiKeyBase \r\n            + publicApiKey\r\n            );\r\n        const comicsMainData = response.data.results[0];\r\n        return _transformComicsData(comicsMainData);\r\n    }\r\n\r\n    const getCharacterComics = async (id) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on comics containig specific character by his unique id.\r\n         * Throws error in case of invalid id.\r\n         * Returns array with comics with transformed data\r\n         * on each comics.\r\n         */\r\n        if (id.toString().length < 7) {\r\n            throw new Error('Invalid id of a character');\r\n        }\r\n        const response = await request(\r\n            _apiUrls.singleCharacter \r\n            + id \r\n            + \"/comics?\" \r\n            + _apiKeyBase \r\n            + publicApiKey\r\n            );\r\n            \r\n        return response.data.results.map(_transformComicsData);\r\n    }\r\n\r\n    const _transformCharacterData = (character) => {\r\n        /**\r\n         * Receives character data object (formed by Marvel API) \r\n         * and returns object with transformed character data \r\n         */\r\n\r\n        /* Validation of character description */\r\n        const noDescriptionMessage = `\r\n            Please visit Homepage or Wiki for detailed description of ${character.name}\r\n            `;\r\n        let description = character.description || noDescriptionMessage;\r\n\r\n        if (description.length >= 235) {\r\n            description = description.slice(0, 235) + \"...\";\r\n        }\r\n\r\n        return {\r\n            id: character.id,\r\n            name: character.name,\r\n            description: description,\r\n            thumbnail: character.thumbnail.path + \".\" + character.thumbnail.extension,\r\n            homepage: character.urls[0].url,\r\n            wiki: character.urls[1].url\r\n        }\r\n    }\r\n\r\n    const _transformComicsData = (comics) => {\r\n        /**\r\n         * Receives comics data object (formed by Marvel API) \r\n         * and returns object with transformed data \r\n         */\r\n\r\n        /* Price validation */\r\n        const price = comics.prices[0].price ? `${comics.prices[0].price}$` : \"Price Not Available\";\r\n\r\n        /* Pages validation */\r\n        const pages = comics.pageCount ? `${comics.pageCount} pages` : \"Unknown number of pages\";\r\n\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'No description available',\r\n            price: price,\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            pages: pages,\r\n            language: comics.textObjects.language || 'en-US'\r\n        }\r\n    }\r\n\r\n    return {\r\n        _baseCharactersLimit,\r\n        _baseCharactersOffset,\r\n        _baseComicsLimit,\r\n        loaded, \r\n        error, \r\n        errorMessage, \r\n        clearError, \r\n        getAllCharacters, \r\n        getCharacter,\r\n        getAllComics,\r\n        getSingleComics,\r\n        getCharacterComics\r\n        };\r\n}\r\n\r\nexport default useMarvelAPIService;","import {Component} from 'react';\r\n\r\nimport ErrorView from '../error-view/error-view';\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false,\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({\r\n            error: true\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorView message=\"Something went wrong. Please try again later\" />\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import {useState, useEffect} from 'react';\r\n\r\nimport useMarvelAPIService from '../../services/marvel-api-service';\r\n\r\nimport ErrorView from '../error-view/error-view';\r\nimport Spinner from '../spinner/spinner';\r\n\r\nimport '../../button.scss';\r\nimport './random-character.scss';\r\n\r\nconst RandomCharacter = () => {\r\n    /* Initializing instances to communicate with Marvel API and work with 'loaded' and 'error' states */\r\n    const {loaded, error, errorMessage, getCharacter, clearError} = useMarvelAPIService();\r\n\r\n    /* Component states */\r\n    const [character, setCharacter] = useState(null);\r\n\r\n    /* Component logic */\r\n\r\n    useEffect(() => {\r\n        /* Getting random character on opening the app */\r\n        getRandomCharacter();\r\n    }, []);\r\n\r\n    const onCharacterLoaded = (character) => {\r\n        /**\r\n         * Saves character data to state\r\n         * of this component.\r\n         */\r\n        setCharacter(character);\r\n    }\r\n\r\n    const getRandomCharacter = () => {\r\n        /**\r\n         * Gets data (object) from Marvel API on random character\r\n         * and saves it to the state of this component.\r\n         */\r\n        clearError();\r\n        setCharacter(null);\r\n\r\n        const maxId = 1011400;\r\n        const minId = 1011000;\r\n        const randomId = Math.floor(minId + Math.random() * (maxId - minId));\r\n\r\n        getCharacter(randomId)\r\n            .then(onCharacterLoaded);\r\n    }\r\n\r\n    return (\r\n        <section className=\"random-section\">\r\n\r\n            <div className=\"random-character\">\r\n                <CharacterView character={character}/>\r\n                <Spinner loaded={loaded}/>\r\n                <ErrorView error={error} errorMessage={errorMessage} flex=\"row\"/>\r\n            </div>\r\n\r\n            <div className=\"random-choose\">\r\n                <p className=\"random-choose__text\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n\r\n                <div>\r\n                    <p className=\"random-choose__text random-choose__text_margined\">Or choose another one</p>\r\n                    <button \r\n                        className=\"app-button app-button_main app-button_on-dark-bg\"\r\n                        onClick={getRandomCharacter}>\r\n                            Try It\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        \r\n        </section>\r\n        \r\n    );\r\n}\r\n\r\n\r\nconst CharacterView = ({character}) => {\r\n    if (!character) {\r\n        return null;\r\n    }\r\n\r\n    const {name, thumbnail, description, homepage, wiki} = character;\r\n\r\n    /* Change styles for a \"not found\" image */\r\n    const imageNotFound = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\";\r\n    let imageClassNames = \"random-character__image\";\r\n    if (thumbnail === imageNotFound) {\r\n        imageClassNames += \" random-character__image_contain\";\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={imageClassNames}>\r\n                <img src={thumbnail} alt=\"random character\" />\r\n            </div>\r\n\r\n            <div className=\"random-character__details\">\r\n                <h3 className=\"random-character__name\">\r\n                    {name}\r\n                </h3>\r\n                <p className=\"random-character__descr\">\r\n                    {description}\r\n                </p>\r\n                <div className=\"random-character__links\">\r\n                    <a href={homepage} className=\"app-button app-button_main\">Homepage</a>\r\n                    <a href={wiki} className=\"app-button\">Wiki</a>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default RandomCharacter;","import PropTypes from 'prop-types';\r\n\r\nimport './character-card.scss';\r\n\r\nconst CharacterCard = (props) => {\r\n    const {id, image, name, onCharacterCardSelected, active} = props;\r\n\r\n    /* Change styles for a \"not found\" image */\r\n    const imageNotFound = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\";\r\n    let imageClassNames = \"character-card__image\";\r\n    if (image === imageNotFound) {\r\n        imageClassNames += \" character-card__image_contain\";\r\n    }\r\n\r\n    /* Change styles for selected card */\r\n    let classNames = active ? 'character-card character-card_active' : 'character-card';\r\n\r\n    return (\r\n        <li \r\n            className={classNames}\r\n            tabIndex=\"0\"\r\n            onClick={() => onCharacterCardSelected(id)}\r\n            onKeyPress={(e) => {\r\n                if (e.key === ' ' || e.key === \"Enter\") {\r\n                    onCharacterCardSelected(id);\r\n                }\r\n            }}\r\n        >\r\n                <div className={imageClassNames}>\r\n                    <img src={image} alt=\"Comics Character Portrait\" />\r\n                </div>\r\n    \r\n                <div className=\"character-card__details\">\r\n                    <h3 className=\"character-card__name\">{name}</h3>\r\n                </div>\r\n        </li>\r\n    );\r\n}\r\n\r\nCharacterCard.propTypes = {\r\n    active: PropTypes.bool,\r\n    onCharacterCardSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharacterCard;","import {useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelAPIService from '../../services/marvel-api-service';\r\n\r\nimport CharacterCard from '../character-card/character-card';\r\nimport ErrorView from '../error-view/error-view';\r\nimport Spinner from '../spinner/spinner';\r\n\r\nimport './characters-list.scss';\r\n\r\n\r\nconst mapToCharacterCards = (characters, activeCardId, onCharacterCardSelected) => {\r\n    /**\r\n     * Helper function for CharatersList component.\r\n     * Receives array with characters data\r\n     * and maps it to CharacterCard elements.\r\n     */\r\n    if (!characters) {\r\n        return null;\r\n    }\r\n\r\n    /* Mapping characters to CharacterCard components */\r\n    return characters.map( ({id, name, thumbnail}) => {\r\n        let active = id === activeCardId;\r\n        return <CharacterCard \r\n                    key={id} \r\n                    id={id}\r\n                    name={name} \r\n                    image={thumbnail}\r\n                    onCharacterCardSelected={onCharacterCardSelected}\r\n                    active={active}\r\n                />;\r\n    });\r\n}\r\n\r\n\r\nconst CharactersList = (props) => {\r\n    const {onCharacterCardSelected, activeCharacterCard} = props;\r\n    /* Initializing instances to communicate with Marvel API */\r\n    const marvelService = useMarvelAPIService();\r\n    const baseOffset = marvelService._baseCharactersOffset;\r\n    const charactersPerLoad = marvelService._baseCharactersLimit;\r\n    const {loaded, error, errorMessage, newItemsLoading, clearError, getAllCharacters} = marvelService;\r\n    /* Component states */\r\n    const [characters, setCharacters] = useState([]);\r\n    const [charactersEnded, setCharactersEnded] = useState(false);\r\n    const [offset, setOffset] = useState(baseOffset);\r\n\r\n    /* Component logic */\r\n    useEffect(() => {\r\n        onLoadCharacters();\r\n    }, []);\r\n\r\n    const onCharactersLoaded = (newCharacters) => {\r\n        /**\r\n         * Saves newly uploaded characters data \r\n         * to the state of this component.\r\n         * And updates offset for following uploads.\r\n         */ \r\n\r\n        /* No \"load more\" button if characters ended */\r\n        let ended = false;\r\n        if (newCharacters.length < charactersPerLoad) {\r\n            ended = true;\r\n        }\r\n        \r\n        setCharacters(characters => [...characters, ...newCharacters]);\r\n        setCharactersEnded(ended);\r\n        setOffset(offset => offset + charactersPerLoad);       \r\n    }\r\n\r\n    const onLoadCharacters = (offset) => {\r\n        /**\r\n         * Gets data (array) from Marvel API on additional\r\n         * 9 characters and saves it to the state \r\n         * of this component.\r\n         */\r\n        clearError();\r\n\r\n        getAllCharacters(offset)\r\n            .then(onCharactersLoaded);\r\n    }\r\n\r\n    /* Rendering */\r\n    const characterCards = mapToCharacterCards(characters, activeCharacterCard, onCharacterCardSelected);\r\n\r\n    return (\r\n        <div className=\"characters-section\">\r\n            <ul className=\"characters-section__list\">\r\n                {characterCards}\r\n                <Spinner loaded={loaded}/>\r\n                <ErrorView error={error} errorMessage={errorMessage} flex=\"column\"/>\r\n            </ul>\r\n\r\n            <button \r\n                className=\"app-button app-button_main app-button_wide\"\r\n                disabled={newItemsLoading}\r\n                style={{'display': charactersEnded ? 'none' : 'block'}}\r\n                onClick={() => onLoadCharacters(offset)}\r\n                >\r\n                    Load More\r\n            </button>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\n\r\nCharactersList.propTypes = {\r\n    activeCharacterCard: PropTypes.number,\r\n    onCharacterCardSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharactersList;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <div className=\"character__skeleton\">\r\n            <p className=\"character__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import {useState, useEffect, useRef} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelAPIService from '../../services/marvel-api-service';\r\n\r\nimport ErrorView from '../error-view/error-view';\r\nimport Spinner from '../spinner/spinner';\r\nimport Skeleton from '../skeleton/skeleton';\r\n\r\nimport './character-details.scss';\r\n\r\n\r\nconst CharacterDetails = (props) => {\r\n    const {characterId} = props;\r\n\r\n    /* Ref for correct scrolling to character details component */\r\n    const characterInfoRef = useRef(null);\r\n\r\n    /* Initializing instances to communicate with Marvel API and work with 'loaded' and 'error' states */\r\n    const {loaded, error, errorMessage, getCharacter, getCharacterComics, clearError} = useMarvelAPIService(true);\r\n\r\n    /* Component states */\r\n    const [character, setCharacter] = useState(null);\r\n    const [characterComics, setCharacterComics] = useState([]);\r\n\r\n    /* Component logic */\r\n\r\n    useEffect(() => {\r\n        getCharacterDetails(characterId);\r\n        onCharacterSelected();\r\n    }, [characterId]);\r\n\r\n    const onCharacterSelected = () => {\r\n        /**\r\n         * Smoothly scrolls page to character info element\r\n         * on selection of character card.\r\n         */\r\n        let clientCoords = characterInfoRef.current.getBoundingClientRect();\r\n        let scrollTop = window.scrollY + clientCoords.top;\r\n        window.scrollTo(0, scrollTop);\r\n    }\r\n\r\n    const onCharacterLoaded = (character) => {\r\n        /**\r\n         * Saves character data to state\r\n         * of this component.\r\n         */\r\n        setCharacter(character);\r\n    }\r\n\r\n    const onCharacterComicsLoaded = (comics) => {\r\n        /**\r\n         * Saves character data to state\r\n         * of this component.\r\n         */\r\n        setCharacterComics(comics);\r\n    }\r\n\r\n    const getCharacterDetails = (id) => {\r\n        /**\r\n         * Gets data (object) from Marvel API on selected character\r\n         * and comics mentioning him \r\n         * and saves it to the state of this component.\r\n         */\r\n        if (!id) {\r\n            return;\r\n        }\r\n        \r\n        clearError();\r\n        setCharacter({});\r\n        setCharacterComics([]);\r\n        getCharacter(id)\r\n            .then(onCharacterLoaded)\r\n            .then(() => getCharacterComics(id))\r\n            .then(onCharacterComicsLoaded);\r\n    }\r\n\r\n    return (\r\n        <div className=\"character-info\" ref={characterInfoRef}>\r\n            <CharacterDetailsView character={character} />\r\n            <Spinner loaded={loaded}/>\r\n            <ErrorView error={error} errorMessage={errorMessage} flex=\"row\"/>\r\n            <ul className=\"character-info__comics\">\r\n                <CharacterComicsView characterComics={characterComics}/>\r\n            </ul>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nconst CharacterDetailsView = ({character}) => {\r\n    /**\r\n     * Returns element with character details\r\n     * or default skeleton on first render\r\n     * or null while character's data is empty (while loading).\r\n     */    \r\n    if (!character) {\r\n        return <Skeleton />;\r\n    }\r\n\r\n    let characterIsEmpty = Object.keys(character).length === 0;\r\n    if (characterIsEmpty) {\r\n        return null;\r\n    }\r\n\r\n    const {name, thumbnail, description, homepage, wiki} = character;\r\n\r\n    /* Change styles for a \"not found\" image */\r\n    const imageNotFound = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\";\r\n    let imageClassNames = \"character-info__image\";\r\n    if (thumbnail === imageNotFound) {\r\n        imageClassNames += \" character-info__image_contain\";\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"character-info__header\">\r\n                    <div className={imageClassNames}>\r\n                        <img src={thumbnail} alt=\"Character Portrait\"/>\r\n                    </div>\r\n    \r\n                    <div className=\"character-info__main\">\r\n                        <h3 className=\"character-info__name\">{name}</h3>\r\n    \r\n                        <div className=\"character-info__links\">\r\n                            <a href={homepage} className=\"app-button app-button_main app-button_mb10\">Homepage</a>\r\n                            <a href={wiki} className=\"app-button\">Wiki</a>\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n    \r\n            <article className=\"character-info__bio\">\r\n                {description}\r\n            </article>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst CharacterComicsView = ({characterComics}) => {\r\n    if (!characterComics || characterComics.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    const comics = characterComics.map(({id, title, thumbnail}) => {\r\n        return (\r\n            <li key={id} className=\"character-info__single-comics\">\r\n                <Link to={`/marvel-wiki-portal/comics/${id}`} className=\"character-info__single-comics_on-hover\">\r\n                    <h6>{title}</h6>\r\n                    <div>\r\n                        <img src={thumbnail} alt={`Cover of ${title} comics`}/>\r\n                    </div>\r\n                </Link>\r\n            </li>\r\n        );\r\n    });\r\n\r\n    return <><h5>Comics:</h5> {comics}</>;\r\n}\r\n\r\n\r\nCharacterDetails.propTypes = {\r\n    characterId: PropTypes.number\r\n}\r\n\r\nexport default CharacterDetails;","export default __webpack_public_path__ + \"static/media/bottom_bg.4d6f9671.png\";","import { useState } from 'react';\r\n\r\nimport RandomCharacter from '../random-character/random-character';\r\nimport CharactersList from '../characters-list/characters-list';\r\nimport CharacterDetails from '../character-details/character-details';\r\nimport ErrorBoundary from '../error-boundary/error-boundary';\r\n\r\nimport vision from '../../static/img/bottom_bg.png';\r\n\r\nconst CharactersPage = () => {\r\n    const [activeCharacterCard, setActiveCharacterCard] = useState(null);\r\n\r\n    const onCharacterCardSelected = (id) => {\r\n        setActiveCharacterCard(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomCharacter />\r\n            </ErrorBoundary>\r\n            \r\n            <div className=\"characters-container\">\r\n                <ErrorBoundary>\r\n                    <CharactersList \r\n                        activeCharacterCard={activeCharacterCard} \r\n                        onCharacterCardSelected={onCharacterCardSelected}\r\n                    />\r\n                </ErrorBoundary>\r\n                \r\n                <ErrorBoundary>\r\n                    <CharacterDetails characterId={activeCharacterCard}/>\r\n                </ErrorBoundary>\r\n            </div>\r\n\r\n            <div className=\"bg-decoration\">\r\n                <img \r\n                    src={vision} \r\n                    alt=\"Vision Character in Attacking Pose\" \r\n                    className=\"bg-decoration__image\"\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CharactersPage;"],"sourceRoot":""}