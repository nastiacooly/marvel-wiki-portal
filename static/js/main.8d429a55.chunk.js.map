{"version":3,"sources":["components/app-header/app-header.js","hooks/http.hook.js","services/api-key.js","services/marvel-api-service.js","components/spinner/spinner.js","components/error-view/error-view.js","components/random-character/random-character.js","components/character-card/character-card.js","components/characters-list/characters-list.js","components/skeleton/skeleton.js","components/character-details/character-details.js","components/error-boundary/error-boundary.js","static/img/bottom_bg.png","components/app/app.js","index.js"],"names":["AppHeader","className","href","useHttp","initialLoadedState","useState","loaded","setLoaded","error","setError","errorMessage","setErrorMessage","newItemsLoading","setNewItemsLoading","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","clearError","publicApiKey","useMarvelAPIService","_apiBase","_apiKeyBase","_baseCharactersOffset","_baseCharactersLimit","_apiUrls","allCharacters","singleCharacter","getAllCharacters","offset","results","map","_transformCharacterData","getCharacter","id","toString","length","characterMainData","character","noDescriptionMessage","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","Spinner","xmlns","style","margin","background","display","shapeRendering","width","height","viewBox","preserveAspectRatio","cx","cy","r","strokeWidth","stroke","strokeDasharray","fill","strokeLinecap","attributeName","type","dur","repeatCount","keyTimes","values","strokeDashoffset","ErrorView","message","flex","ErrorIcon","y","x","version","transformOrigin","transform","d","begin","defaultProps","CharacterView","imageClassNames","src","alt","RandomCharacter","setCharacter","useEffect","getRandomCharacter","onCharacterLoaded","minId","randomId","Math","floor","random","then","content","onClick","CharacterCard","props","image","onCharacterCardSelected","classNames","active","tabIndex","onKeyPress","e","key","CharactersList","activeCharacterCard","marvelService","baseOffset","charactersPerLoad","characters","setCharacters","charactersEnded","setCharactersEnded","setOffset","onLoadCharacters","onCharactersLoaded","newCharacters","ended","characterCards","renderCharacterCards","getContent","disabled","Skeleton","CharacterDetailsView","CharacterComicsView","CharacterDetails","characterId","getCharacterDetails","characterComics","item","i","comicsContent","ErrorBoundary","state","errorInfo","this","setState","children","Component","App","setActiveCharacterCard","vision","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d429a55.chunk.js","sourcesContent":["import './app-header.scss';\r\n\r\nconst AppHeader = () => {\r\n    return (\r\n        <header className=\"app-header\">\r\n            <h1 className=\"app-name\">\r\n                <span className=\"app-name__main-title\">Marvel</span> Wiki Portal\r\n            </h1>\r\n\r\n            <nav className=\"app-menu\">\r\n                <ul className=\"app-menu__list\">\r\n                    <li className=\"app-menu__item app-menu__item_chosen\">\r\n                        <a href=\"marvel.com\">Characters</a>\r\n                    </li>\r\n                    /\r\n                    <li className=\"app-menu__item\">\r\n                        <a href=\"marvel.com\">Comics</a>\r\n                    </li>\r\n                </ul>\r\n\r\n            </nav>\r\n\r\n        </header>\r\n    );\r\n\r\n}\r\n\r\nexport default AppHeader;","import {useState, useCallback} from 'react';\r\n\r\nconst useHttp = (initialLoadedState = false) => {\r\n    /**\r\n     * Custom hook for http-requests.\r\n     * Returns method to get data from url and to set corresponding 'loaded' and 'error' states.\r\n     * Also returns state values and clearError method.\r\n     */\r\n    const [loaded, setLoaded] = useState(initialLoadedState);\r\n    const [error, setError] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [newItemsLoading, setNewItemsLoading] = useState(false);\r\n    \r\n    const request = useCallback( async (url, method=\"GET\", body=null, headers={'Content-type': 'application/json'}) => {\r\n        setLoaded(false);\r\n        setError(false);\r\n        setNewItemsLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoaded(true);\r\n            setError(false);\r\n            setNewItemsLoading(false);\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoaded(true);\r\n            setError(true);\r\n            setNewItemsLoading(false);\r\n            setErrorMessage(\"Something went wrong. Please try again later.\");\r\n            throw(e);\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(false);\r\n        setErrorMessage('');\r\n    }, []);\r\n\r\n    return {loaded, error, errorMessage, newItemsLoading, request, clearError};\r\n\r\n}\r\n\r\nexport default useHttp;","const publicApiKey = \"0cccfebfa143cbee173b3ff218a5afc4\";\r\n\r\nexport default publicApiKey;","import useHttp from '../hooks/http.hook';\r\n\r\nimport publicApiKey from './api-key';\r\n\r\nconst useMarvelAPIService = (initialLoadedState = false) => {\r\n    /**\r\n     * Custom hook to work with Marvel API.\r\n     * Returns methods for getting characters\r\n     * and returns corresponding state values.\r\n     * Based on custom 'useHttp' hook.\r\n     */\r\n    const {loaded, error, errorMessage, request, clearError} = useHttp(initialLoadedState);\r\n\r\n    const _apiBase = \"https://gateway.marvel.com:443/v1/public\";\r\n    const _apiKeyBase = \"apikey=\";\r\n    const _baseCharactersOffset = 210; /* number of characters to pass from the begginnng of the list */\r\n    const _baseCharactersLimit = 9; /* characters per load */\r\n    const _apiUrls = {\r\n        allCharacters: `${_apiBase}/characters?`,\r\n        singleCharacter: `${_apiBase}/characters/`,\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseCharactersOffset) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on all characters (limited in this._baseCharactersLimit).\r\n         * Takes optional argument for characters offset (number).\r\n         * Returns array with all characters with data \r\n         * transformed for each character.\r\n         */\r\n        const response = await request(\r\n            _apiUrls.allCharacters \r\n            + `limit=${_baseCharactersLimit}&offset=${offset}&${_apiKeyBase}${publicApiKey}`\r\n        );\r\n        return response.data.results.map(_transformCharacterData);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on a character by its unique id.\r\n         * Throws error in case of invalid id.\r\n         * Returns JS-object with transformed data.\r\n         */\r\n        if (id.toString().length < 7) {\r\n            throw new Error('Invalid id of a character');\r\n        }\r\n        const response = await request(\r\n            _apiUrls.singleCharacter \r\n            + id \r\n            + \"?\" \r\n            + _apiKeyBase \r\n            + publicApiKey\r\n            );\r\n        const characterMainData = response.data.results[0];\r\n        return _transformCharacterData(characterMainData);\r\n    }\r\n\r\n    const _transformCharacterData = (character) => {\r\n        /**\r\n         * Receives character data object (formed by Marvel API) \r\n         * and returns object with transformed character data \r\n         */\r\n\r\n        /* Validation of character description */\r\n        const noDescriptionMessage = `\r\n            Please visit Homepage or Wiki for detailed description of ${character.name}\r\n            `;\r\n        let description = character.description || noDescriptionMessage;\r\n\r\n        if (description.length >= 235) {\r\n            description = description.slice(0, 235) + \"...\";\r\n        }\r\n\r\n        return {\r\n            id: character.id,\r\n            name: character.name,\r\n            description: description,\r\n            thumbnail: character.thumbnail.path + \".\" + character.thumbnail.extension,\r\n            homepage: character.urls[0].url,\r\n            wiki: character.urls[1].url,\r\n            comics: character.comics.items,\r\n        }\r\n    }\r\n\r\n    return {_baseCharactersLimit,\r\n            _baseCharactersOffset,\r\n            loaded, \r\n            error, \r\n            errorMessage, \r\n            clearError, \r\n            getAllCharacters, \r\n            getCharacter};\r\n}\r\n\r\nexport default useMarvelAPIService;","const Spinner = () => {\r\n    /* [ldio] generated by https://loading.io/ */ \r\n    return (\r\n        <svg \r\n            xmlns=\"http://www.w3.org/2000/svg\" \r\n            style={{margin: '0 auto', background: 'none', display: 'block', shapeRendering: 'auto'}} \r\n            width=\"200px\" \r\n            height=\"200px\" \r\n            viewBox=\"0 0 100 100\" \r\n            preserveAspectRatio=\"xMidYMid\">\r\n                <circle \r\n                    cx=\"50\" \r\n                    cy=\"50\" \r\n                    r=\"32\" \r\n                    strokeWidth=\"8\" \r\n                    stroke=\"#9f0013\" \r\n                    strokeDasharray=\"50.26548245743669 50.26548245743669\" \r\n                    fill=\"none\" \r\n                    strokeLinecap=\"round\">\r\n                    <animateTransform attributeName=\"transform\" type=\"rotate\" dur=\"2s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"0 50 50;360 50 50\"></animateTransform>\r\n                </circle>\r\n                <circle \r\n                    cx=\"50\" \r\n                    cy=\"50\" \r\n                    r=\"23\" \r\n                    strokeWidth=\"8\" \r\n                    stroke=\"#232222\" \r\n                    strokeDasharray=\"36.12831551628262 36.12831551628262\" \r\n                    strokeDashoffset=\"36.12831551628262\" \r\n                    fill=\"none\" \r\n                    strokeLinecap=\"round\">\r\n                    <animateTransform attributeName=\"transform\" type=\"rotate\" dur=\"2s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"0 50 50;-360 50 50\"></animateTransform>\r\n                </circle>\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport default Spinner;","import PropTypes from 'prop-types';\r\n\r\nimport './error-view.scss';\r\n\r\nconst ErrorView = ({message, flex}) => {\r\n    let className;\r\n    switch(flex) {\r\n        case \"column\":\r\n            className = \"error-view error-view_columned\";\r\n            break;\r\n        case \"row\":\r\n            className = \"error-view error-view_rowed\";\r\n            break;\r\n        default:\r\n            className = \"error-view\";\r\n    }\r\n\r\n    return (\r\n        <div className={className}>\r\n            <ErrorIcon />\r\n            <p className=\"error-view__message\">{message}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst ErrorIcon = () => {\r\n    return (\r\n        <svg \r\n            viewBox=\"0 0 100 100\" \r\n            y=\"0\" \r\n            x=\"0\" \r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            version=\"1.1\" \r\n            style={{height: '150px', width: '150px', background: 'none'}} \r\n            width=\"150px\" \r\n            height=\"150px\">\r\n                <g className=\"ldl-scale\" \r\n                    style={{transformOrigin: '50% 50%', transform: 'scale(0.8, 0.8)'}}>\r\n                <g className=\"ldl-ani\">\r\n                <g className=\"ldl-layer\">\r\n                <g className=\"ldl-ani\" \r\n                    style={{transformOrigin: '50px 50px', transform: 'scale(0.91)'}}>\r\n                    <path fill=\"#e15b64\" d=\"M14.653 85.487c-3.138-1.806-4.167-6.008-2.198-9.12 8.401-13.282 18.34-25.329 29.177-36.099 10.916-10.864 22.708-20.49 34.913-29.273 2.772-1.995 6.57-1.344 8.557 1.485 1.928 2.744 1.471 6.578-1.06 8.732-11.111 9.456-21.591 19.558-30.95 30.517C43.876 62.5 35.786 74.12 29.248 86.488c-1.653 3.126-5.423 4.276-8.429 2.547l-6.166-3.548z\" style={{fill: 'rgb(159, 0, 19)'}}>\r\n                    <animateTransform attributeName=\"transform\" type=\"scale\" dur=\"2s\" repeatCount=\"indefinite\" keyTimes=\"0; 0.5; 1\" values=\"0.8 0.8; 1 1; 0.8 0.8\"></animateTransform>\r\n                    </path>\r\n                </g></g>\r\n                <g className=\"ldl-layer\">\r\n                <g className=\"ldl-ani\" \r\n                    style={{transformOrigin: '50px 50px', transform: 'scale(0.91)'}}>\r\n                    <path fill=\"#e15b64\" d=\"M78.739 82.438c-3.067 1.804-7.041.872-8.916-2.152-6.367-10.267-14.543-19.718-23.698-28.397-9.306-8.827-19.587-16.906-30.29-24.594a6.594 6.594 0 0 1-1.682-8.948l1.23-1.895a6.609 6.609 0 0 1 9.03-2.012c11.571 7.19 22.962 14.943 33.735 23.864 10.673 8.851 20.777 18.958 29.162 30.721 2.256 3.165 1.337 7.584-2.014 9.555l-6.557 3.858z\" style={{fill: 'rgb(159, 0, 19)'}}>\r\n                    <animateTransform attributeName=\"transform\" type=\"scale\" dur=\"2s\" begin=\"0.5s\" repeatCount=\"indefinite\" keyTimes=\"0; 0.5; 1\" values=\"1 1; 0.8 0.8; 1 1\"></animateTransform>\r\n                    </path>\r\n                </g></g>\r\n                </g></g>\r\n        </svg>\r\n    );\r\n}\r\n\r\nErrorView.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n    flex: PropTypes.oneOf(['column', 'row'])\r\n}\r\n\r\nErrorView.defaultProps = {\r\n    message: \"Something went wrong\"\r\n}\r\n\r\nexport default ErrorView;","import {useState, useEffect} from 'react';\r\n\r\nimport useMarvelAPIService from '../../services/marvel-api-service';\r\nimport Spinner from '../spinner/spinner';\r\nimport ErrorView from '../error-view/error-view';\r\n\r\nimport '../../button.scss';\r\nimport './random-character.scss';\r\n\r\nconst RandomCharacter = () => {\r\n    /* Initializing instances to communicate with Marvel API and work with 'loaded' and 'error' states */\r\n    const {loaded, error, errorMessage, getCharacter, clearError} = useMarvelAPIService();\r\n\r\n    /* Component states */\r\n    const [character, setCharacter] = useState({});\r\n\r\n    /* Component logic */\r\n\r\n    useEffect(() => {\r\n        /* Getting random character on opening the app */\r\n        getRandomCharacter();\r\n    }, []);\r\n\r\n    const onCharacterLoaded = (character) => {\r\n        /**\r\n         * Saves character data to state\r\n         * of this component.\r\n         */\r\n        setCharacter(character);\r\n    }\r\n\r\n    const getRandomCharacter = () => {\r\n        /**\r\n         * Gets data (object) from Marvel API on random character\r\n         * and saves it to the state of this component.\r\n         */\r\n        clearError();\r\n\r\n        const maxId = 1011400;\r\n        const minId = 1011000;\r\n        const randomId = Math.floor(minId + Math.random() * (maxId - minId));\r\n\r\n        getCharacter(randomId)\r\n            .then(onCharacterLoaded);\r\n    }\r\n\r\n    const getContent = () => {\r\n        /**\r\n         * Returns content for rendering\r\n         * depending on error and loaded status.\r\n         */\r\n        return (\r\n            error ? \r\n                <ErrorView message={errorMessage} flex=\"row\" /> \r\n                : loaded ? \r\n                    <CharacterView character={character}/> \r\n                    : <Spinner/>\r\n        );\r\n    }\r\n\r\n    /* Rendering */\r\n\r\n    const content = getContent();\r\n\r\n    return (\r\n        <section className=\"random-section\">\r\n\r\n            <div className=\"random-character\">\r\n                {content}\r\n            </div>\r\n\r\n            <div className=\"random-choose\">\r\n                <p className=\"random-choose__text\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n\r\n                <div>\r\n                    <p className=\"random-choose__text random-choose__text_margined\">Or choose another one</p>\r\n                    <button \r\n                        className=\"app-button app-button_main app-button_on-dark-bg\"\r\n                        onClick={getRandomCharacter}>\r\n                            Try It\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        \r\n        </section>\r\n        \r\n    );\r\n}\r\n\r\n\r\nconst CharacterView = ({character}) => {\r\n    const {name, thumbnail, description, homepage, wiki} = character;\r\n\r\n    /* Change styles for a \"not found\" image */\r\n    const imageNotFound = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\";\r\n    let imageClassNames = \"random-character__image\";\r\n    if (thumbnail === imageNotFound) {\r\n        imageClassNames += \" random-character__image_contain\";\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={imageClassNames}>\r\n                <img src={thumbnail} alt=\"random character\" />\r\n            </div>\r\n\r\n            <div className=\"random-character__details\">\r\n                <h3 className=\"random-character__name\">\r\n                    {name}\r\n                </h3>\r\n                <p className=\"random-character__descr\">\r\n                    {description}\r\n                </p>\r\n                <div className=\"random-character__links\">\r\n                    <a href={homepage} className=\"app-button app-button_main\">Homepage</a>\r\n                    <a href={wiki} className=\"app-button\">Wiki</a>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default RandomCharacter;","import PropTypes from 'prop-types';\r\n\r\nimport './character-card.scss';\r\n\r\nconst CharacterCard = (props) => {\r\n    const {id, image, name, onCharacterCardSelected, active} = props;\r\n\r\n    /* Change styles for a \"not found\" image */\r\n    const imageNotFound = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\";\r\n    let imageClassNames = \"character-card__image\";\r\n    if (image === imageNotFound) {\r\n        imageClassNames += \" character-card__image_contain\";\r\n    }\r\n\r\n    /* Change styles for selected card */\r\n    let classNames = active ? 'character-card character-card_active' : 'character-card';\r\n\r\n    return (\r\n        <li \r\n            className={classNames}\r\n            tabIndex=\"0\"\r\n            onClick={() => onCharacterCardSelected(id)}\r\n            onKeyPress={(e) => {\r\n                if (e.key === ' ' || e.key === \"Enter\") {\r\n                    onCharacterCardSelected(id);\r\n                }\r\n            }}\r\n        >\r\n                <div className={imageClassNames}>\r\n                    <img src={image} alt=\"Comics Character Portrait\" />\r\n                </div>\r\n    \r\n                <div className=\"character-card__details\">\r\n                    <h3 className=\"character-card__name\">{name}</h3>\r\n                </div>\r\n        </li>\r\n    );\r\n}\r\n\r\nCharacterCard.propTypes = {\r\n    active: PropTypes.bool,\r\n    onCharacterCardSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharacterCard;","import {useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelAPIService from '../../services/marvel-api-service';\r\n\r\nimport CharacterCard from '../character-card/character-card';\r\nimport ErrorView from '../error-view/error-view';\r\nimport Spinner from '../spinner/spinner';\r\n\r\nimport './characters-list.scss';\r\n\r\nconst CharactersList = (props) => {\r\n    const {onCharacterCardSelected, activeCharacterCard} = props;\r\n    /* Initializing instances to communicate with Marvel API */\r\n    const marvelService = useMarvelAPIService();\r\n    const baseOffset = marvelService._baseCharactersOffset;\r\n    const charactersPerLoad = marvelService._baseCharactersLimit;\r\n    const {loaded, error, errorMessage, newItemsLoading, clearError, getAllCharacters} = marvelService;\r\n    /* Component states */\r\n    const [characters, setCharacters] = useState([]);\r\n    const [charactersEnded, setCharactersEnded] = useState(false);\r\n    const [offset, setOffset] = useState(baseOffset);\r\n\r\n    /* Component logic */\r\n    useEffect(() => {\r\n        onLoadCharacters();\r\n    }, []);\r\n\r\n    const onCharactersLoaded = (newCharacters) => {\r\n        /**\r\n         * Saves newly uploaded characters data \r\n         * to the state of this component.\r\n         * And updates offset for following uploads.\r\n         */ \r\n\r\n        /* No \"load more\" button if characters ended */\r\n        let ended = false;\r\n        if (newCharacters.length < charactersPerLoad) {\r\n            ended = true;\r\n        }\r\n        \r\n        setCharacters(characters => [...characters, ...newCharacters]);\r\n        setCharactersEnded(ended);\r\n        setOffset(offset => offset + charactersPerLoad);       \r\n    }\r\n\r\n    const onLoadCharacters = (offset) => {\r\n        /**\r\n         * Gets data (array) from Marvel API on additional\r\n         * 9 characters and saves it to the state \r\n         * of this component.\r\n         */\r\n        clearError();\r\n\r\n        getAllCharacters(offset)\r\n            .then(onCharactersLoaded);\r\n    }\r\n\r\n    const renderCharacterCards = (characters) => {\r\n        /**\r\n         * Returns character cards elements\r\n         * with data about characters.\r\n         */\r\n        if (!characters) {\r\n            return null;\r\n        }\r\n\r\n        /* Mapping characters to CharacterCard components */\r\n        return characters.map( ({id, name, thumbnail}) => {\r\n            let active = id === activeCharacterCard;\r\n            return <CharacterCard \r\n                        key={id} \r\n                        id={id}\r\n                        name={name} \r\n                        image={thumbnail}\r\n                        onCharacterCardSelected={onCharacterCardSelected}\r\n                        active={active}\r\n                    />;\r\n        });\r\n    }\r\n\r\n    const getContent = () => {\r\n        /**\r\n         * Determines content for rendering\r\n         * depending on error and loaded status.\r\n         */\r\n        const characterCards = renderCharacterCards(characters);\r\n\r\n        /* Return content */\r\n        return (\r\n            error ? \r\n                <ErrorView message={errorMessage} flex=\"column\" /> \r\n                : loaded ? \r\n                    characterCards \r\n                    : (<> {characterCards} <Spinner/> </>)\r\n        );\r\n    }\r\n\r\n    /* Rendering */\r\n\r\n    const content = getContent();\r\n\r\n    return (\r\n        <div className=\"characters-section\">\r\n            <ul className=\"characters-section__list\">\r\n                {content}\r\n            </ul>\r\n\r\n            <button \r\n                className=\"app-button app-button_main app-button_wide\"\r\n                disabled={newItemsLoading}\r\n                style={{'display': charactersEnded ? 'none' : 'block'}}\r\n                onClick={() => onLoadCharacters(offset)}\r\n                >\r\n                    Load More\r\n            </button>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nCharactersList.propTypes = {\r\n    activeCharacterCard: PropTypes.number,\r\n    onCharacterCardSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharactersList;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <div className=\"character__skeleton\">\r\n            <p className=\"character__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import {useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelAPIService from '../../services/marvel-api-service';\r\nimport ErrorView from '../error-view/error-view';\r\nimport Spinner from '../spinner/spinner';\r\nimport Skeleton from '../skeleton/skeleton';\r\n\r\nimport './character-details.scss';\r\n\r\nconst CharacterDetails = (props) => {\r\n    const {characterId} = props;\r\n\r\n    /* Initializing instances to communicate with Marvel API and work with 'loaded' and 'error' states */\r\n    const {loaded, error, errorMessage, getCharacter, clearError} = useMarvelAPIService(true);\r\n\r\n    /* Component states */\r\n    const [character, setCharacter] = useState(null);\r\n\r\n    /* Component logic */\r\n\r\n    useEffect(() => {\r\n        getCharacterDetails(characterId);\r\n    }, [characterId]);\r\n\r\n    const onCharacterLoaded = (character) => {\r\n        /**\r\n         * Saves character data to state\r\n         * of this component.\r\n         */\r\n        setCharacter(character);\r\n    }\r\n\r\n    const getCharacterDetails = (id) => {\r\n        /**\r\n         * Gets data (object) from Marvel API on selected character\r\n         * and saves it to the state of this component.\r\n         */\r\n        if (!id) {\r\n            return;\r\n        }\r\n        \r\n        clearError();\r\n        setCharacter(null);\r\n        getCharacter(id)\r\n            .then(onCharacterLoaded);\r\n    }\r\n\r\n    const getContent = () => {\r\n        /**\r\n         * Returns different content for rendering\r\n         * depending on error and loaded status.\r\n         */\r\n        return (\r\n            error ? \r\n                <ErrorView message={errorMessage} flex=\"row\" /> \r\n                : loaded ? \r\n                    (character ? <CharacterDetailsView character={character}/> : <Skeleton/>)\r\n                        : <Spinner/>\r\n        );\r\n    }\r\n\r\n    /* Rendering */\r\n\r\n    const content = getContent();\r\n\r\n    const characterComics = character?.comics?.map((item, i) => {\r\n        return <CharacterComicsView key={i} name={item.name}/>\r\n    });\r\n\r\n    const comicsContent = characterComics && characterComics.length > 0 ? \r\n                            (<><h5>Comics:</h5> {characterComics}</>) \r\n                            : null;\r\n\r\n    return (\r\n        <div className=\"character-info\">\r\n            {content}\r\n            <ul className=\"character-info__comics\">\r\n                {comicsContent}\r\n            </ul>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nconst CharacterDetailsView = ({character}) => {\r\n    /**\r\n     * Returns element with character details.\r\n     */\r\n    const {name, thumbnail, description, homepage, wiki} = character;\r\n\r\n    /* Change styles for a \"not found\" image */\r\n    const imageNotFound = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\";\r\n    let imageClassNames = \"character-info__image\";\r\n    if (thumbnail === imageNotFound) {\r\n        imageClassNames += \" character-info__image_contain\";\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"character-info__header\">\r\n                    <div className={imageClassNames}>\r\n                        <img src={thumbnail} alt=\"Character Portrait\"/>\r\n                    </div>\r\n    \r\n                    <div className=\"character-info__main\">\r\n                        <h3 className=\"character-info__name\">{name}</h3>\r\n    \r\n                        <div className=\"character-info__links\">\r\n                            <a href={homepage} className=\"app-button app-button_main app-button_mb10\">Homepage</a>\r\n                            <a href={wiki} className=\"app-button\">Wiki</a>\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n    \r\n            <article className=\"character-info__bio\">\r\n                {description}\r\n            </article>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst CharacterComicsView = (props) => {\r\n    return (\r\n        <li className=\"character-info__single-comics\">\r\n            {props.name}\r\n        </li>\r\n    );\r\n}\r\n\r\nCharacterDetails.propTypes = {\r\n    characterId: PropTypes.number\r\n}\r\n\r\nexport default CharacterDetails;","import {Component} from 'react';\r\n\r\nimport ErrorView from '../error-view/error-view';\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false,\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({\r\n            error: true\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorView />\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/bottom_bg.4d6f9671.png\";","import {useState} from 'react';\n\nimport AppHeader from '../app-header/app-header';\nimport RandomCharacter from '../random-character/random-character';\nimport CharactersList from '../characters-list/characters-list';\nimport CharacterDetails from '../character-details/character-details';\n\nimport ErrorBoundary from '../error-boundary/error-boundary';\n\nimport vision from '../../static/img/bottom_bg.png';\n\nimport './app.scss';\n\nconst App = () => {\n  const [activeCharacterCard, setActiveCharacterCard] = useState(null);\n\n  const onCharacterCardSelected = (id) => {\n    setActiveCharacterCard(id);\n  }\n\n  return (\n    <div className=\"app-container\">\n      <AppHeader />\n\n      <main>\n        <ErrorBoundary>\n          <RandomCharacter />\n        </ErrorBoundary>\n\n        <div className=\"characters-container\">\n          <ErrorBoundary>\n            <CharactersList \n              activeCharacterCard={activeCharacterCard} \n              onCharacterCardSelected={onCharacterCardSelected}\n            />\n          </ErrorBoundary>\n\n          <ErrorBoundary>\n            <CharacterDetails characterId={activeCharacterCard}/>\n          </ErrorBoundary>\n        </div>\n\n      </main>\n\n      <footer className=\"app-footer\">\n        <img \n          src={vision} \n          alt=\"Vision Character in Attacking Pose\" \n          className=\"app-footer__image\"\n        />\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/app/app';\n\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}