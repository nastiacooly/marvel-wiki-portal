{"version":3,"sources":["components/error-view/error-view.js","hooks/conditional-render.js","hooks/http.hook.js","services/api-key.js","services/marvel-api-service.js","components/error-boundary/error-boundary.js","static/img/Avengers.png","static/img/Avengers_logo.png","components/app-banner/app-banner.js","components/comics-card/comics-card.js","components/comics-list/comics-list.js","components/pages/comics-page.js"],"names":["ErrorView","className","message","flex","ErrorIcon","viewBox","y","x","xmlns","version","style","height","width","background","transformOrigin","transform","fill","d","attributeName","type","dur","repeatCount","keyTimes","values","begin","defaultProps","useConditionalRender","error","errorMessage","loaded","content","loadMore","useHttp","initialLoadedState","useState","setLoaded","setError","setErrorMessage","newItemsLoading","setNewItemsLoading","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","clearError","publicApiKey","useMarvelAPIService","_apiBase","_apiKeyBase","_baseCharactersOffset","_baseCharactersLimit","_baseComicsLimit","_apiUrls","allCharacters","singleCharacter","allComics","singleComics","getAllCharacters","offset","results","map","_transformCharacterData","getCharacter","id","toString","length","characterMainData","getAllComics","_transformComicsData","getSingleComics","comicsMainData","getCharacterComics","character","noDescriptionMessage","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","price","prices","pages","pageCount","title","language","textObjects","ErrorBoundary","state","errorInfo","this","setState","props","children","Component","AppBanner","src","avengers","alt","logo","ComicsCard","image","imageClassNames","tabIndex","to","ComicsList","marvelService","comicsPerLoad","setComics","comicsEnded","setComicsEnded","setOffset","useEffect","onLoadComics","onComicsLoaded","newComics","ended","then","i","mapToComicsCards","contentView","disabled","onClick","ComicsPage"],"mappings":"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","file":"static/js/6.e31941f5.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nimport './error-view.scss';\r\n\r\nconst ErrorView = ({message, flex}) => {\r\n    let className;\r\n    switch(flex) {\r\n        case \"column\":\r\n            className = \"error-view error-view_columned\";\r\n            break;\r\n        case \"row\":\r\n            className = \"error-view error-view_rowed\";\r\n            break;\r\n        default:\r\n            className = \"error-view\";\r\n    }\r\n\r\n    return (\r\n        <div className={className}>\r\n            <ErrorIcon />\r\n            <p className=\"error-view__message\">{message}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst ErrorIcon = () => {\r\n    return (\r\n        <svg \r\n            viewBox=\"0 0 100 100\" \r\n            y=\"0\" \r\n            x=\"0\" \r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            version=\"1.1\" \r\n            style={{height: '150px', width: '150px', background: 'none'}} \r\n            width=\"150px\" \r\n            height=\"150px\">\r\n                <g className=\"ldl-scale\" \r\n                    style={{transformOrigin: '50% 50%', transform: 'scale(0.8, 0.8)'}}>\r\n                <g className=\"ldl-ani\">\r\n                <g className=\"ldl-layer\">\r\n                <g className=\"ldl-ani\" \r\n                    style={{transformOrigin: '50px 50px', transform: 'scale(0.91)'}}>\r\n                    <path fill=\"#e15b64\" d=\"M14.653 85.487c-3.138-1.806-4.167-6.008-2.198-9.12 8.401-13.282 18.34-25.329 29.177-36.099 10.916-10.864 22.708-20.49 34.913-29.273 2.772-1.995 6.57-1.344 8.557 1.485 1.928 2.744 1.471 6.578-1.06 8.732-11.111 9.456-21.591 19.558-30.95 30.517C43.876 62.5 35.786 74.12 29.248 86.488c-1.653 3.126-5.423 4.276-8.429 2.547l-6.166-3.548z\" style={{fill: 'rgb(159, 0, 19)'}}>\r\n                    <animateTransform attributeName=\"transform\" type=\"scale\" dur=\"2s\" repeatCount=\"indefinite\" keyTimes=\"0; 0.5; 1\" values=\"0.8 0.8; 1 1; 0.8 0.8\"></animateTransform>\r\n                    </path>\r\n                </g></g>\r\n                <g className=\"ldl-layer\">\r\n                <g className=\"ldl-ani\" \r\n                    style={{transformOrigin: '50px 50px', transform: 'scale(0.91)'}}>\r\n                    <path fill=\"#e15b64\" d=\"M78.739 82.438c-3.067 1.804-7.041.872-8.916-2.152-6.367-10.267-14.543-19.718-23.698-28.397-9.306-8.827-19.587-16.906-30.29-24.594a6.594 6.594 0 0 1-1.682-8.948l1.23-1.895a6.609 6.609 0 0 1 9.03-2.012c11.571 7.19 22.962 14.943 33.735 23.864 10.673 8.851 20.777 18.958 29.162 30.721 2.256 3.165 1.337 7.584-2.014 9.555l-6.557 3.858z\" style={{fill: 'rgb(159, 0, 19)'}}>\r\n                    <animateTransform attributeName=\"transform\" type=\"scale\" dur=\"2s\" begin=\"0.5s\" repeatCount=\"indefinite\" keyTimes=\"0; 0.5; 1\" values=\"1 1; 0.8 0.8; 1 1\"></animateTransform>\r\n                    </path>\r\n                </g></g>\r\n                </g></g>\r\n        </svg>\r\n    );\r\n}\r\n\r\nErrorView.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n    flex: PropTypes.oneOf(['column', 'row'])\r\n}\r\n\r\nErrorView.defaultProps = {\r\n    message: \"Something went wrong\"\r\n}\r\n\r\nexport default ErrorView;","import ErrorView from \"../components/error-view/error-view\";\r\nimport Spinner from \"../components/spinner/spinner\";\r\n\r\n\r\nconst useConditionalRender = (error, errorMessage, loaded, content, loadMore=false, flex=null) => {\r\n    /**\r\n     * Returns different content for rendering\r\n     * depending on error and loaded states.\r\n     */\r\n    if (error) {\r\n        return <ErrorView message={errorMessage} flex={flex} />;\r\n    }\r\n    if (loaded) {\r\n        return content;\r\n    }\r\n    /* In case of loading additional items, spinner should be placed under previous items */\r\n    if (loadMore) {\r\n        return <>{content} <Spinner /></>;\r\n    }\r\n    return <Spinner />;\r\n}\r\n\r\nexport default useConditionalRender;","import {useState, useCallback} from 'react';\r\n\r\nconst useHttp = (initialLoadedState = false) => {\r\n    /**\r\n     * Custom hook for http-requests.\r\n     * Returns method to get data from url and to set corresponding 'loaded' and 'error' states.\r\n     * Also returns state values and clearError method.\r\n     */\r\n    const [loaded, setLoaded] = useState(initialLoadedState);\r\n    const [error, setError] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [newItemsLoading, setNewItemsLoading] = useState(false);\r\n    \r\n    const request = useCallback( async (url, method=\"GET\", body=null, headers={'Content-type': 'application/json'}) => {\r\n        setLoaded(false);\r\n        setError(false);\r\n        setNewItemsLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoaded(true);\r\n            setError(false);\r\n            setNewItemsLoading(false);\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoaded(true);\r\n            setError(true);\r\n            setNewItemsLoading(false);\r\n            setErrorMessage(\"Something went wrong. Please try again later.\");\r\n            throw(e);\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(false);\r\n        setErrorMessage('');\r\n    }, []);\r\n\r\n    return {loaded, error, errorMessage, newItemsLoading, request, clearError};\r\n\r\n}\r\n\r\nexport default useHttp;","const publicApiKey = \"0cccfebfa143cbee173b3ff218a5afc4\";\r\n\r\nexport default publicApiKey;","import useHttp from '../hooks/http.hook';\r\n\r\nimport publicApiKey from './api-key';\r\n\r\nconst useMarvelAPIService = (initialLoadedState = false) => {\r\n    /**\r\n     * Custom hook to work with Marvel API.\r\n     * Returns methods for getting characters\r\n     * and returns corresponding state values.\r\n     * Based on custom 'useHttp' hook.\r\n     */\r\n    const {loaded, error, errorMessage, request, clearError} = useHttp(initialLoadedState);\r\n\r\n    const _apiBase = \"https://gateway.marvel.com:443/v1/public\";\r\n    const _apiKeyBase = \"apikey=\";\r\n    const _baseCharactersOffset = 210; /* number of characters to pass from the begginnng of the list */\r\n    const _baseCharactersLimit = 9; /* characters per load */\r\n    const _baseComicsLimit = 4; /* comics per load */\r\n    const _apiUrls = {\r\n        allCharacters: `${_apiBase}/characters?`,\r\n        singleCharacter: `${_apiBase}/characters/`,\r\n        allComics: `${_apiBase}/comics?`,\r\n        singleComics: `${_apiBase}/comics/`,\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseCharactersOffset) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on all characters (limited in _baseCharactersLimit).\r\n         * Takes optional argument for characters offset (number).\r\n         * Returns array with all characters with data \r\n         * transformed for each character.\r\n         */\r\n        const response = await request(\r\n            _apiUrls.allCharacters \r\n            + `limit=${_baseCharactersLimit}&offset=${offset}&${_apiKeyBase}${publicApiKey}`\r\n        );\r\n        return response.data.results.map(_transformCharacterData);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on a character by its unique id.\r\n         * Throws error in case of invalid id.\r\n         * Returns JS-object with transformed data.\r\n         */\r\n        if (id.toString().length < 7) {\r\n            throw new Error('Invalid id of a character');\r\n        }\r\n        const response = await request(\r\n            _apiUrls.singleCharacter \r\n            + id \r\n            + \"?\" \r\n            + _apiKeyBase \r\n            + publicApiKey\r\n            );\r\n        const characterMainData = response.data.results[0];\r\n        return _transformCharacterData(characterMainData);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on all comics (limited in _baseComicsLimit).\r\n         * Returns array with all comics with data \r\n         * transformed for each comics.\r\n         */\r\n        const response = await request(\r\n            _apiUrls.allComics \r\n            + `limit=${_baseComicsLimit}&offset=${offset}&${_apiKeyBase}${publicApiKey}`\r\n        );\r\n\r\n        return response.data.results.map(_transformComicsData);\r\n    }\r\n\r\n    const getSingleComics = async (id) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on a comics by its unique id.\r\n         * Throws error in case of invalid id.\r\n         * Returns JS-object with transformed data.\r\n         */\r\n        const response = await request(\r\n            _apiUrls.singleComics \r\n            + id \r\n            + \"?\" \r\n            + _apiKeyBase \r\n            + publicApiKey\r\n            );\r\n        const comicsMainData = response.data.results[0];\r\n        return _transformComicsData(comicsMainData);\r\n    }\r\n\r\n    const getCharacterComics = async (id) => {\r\n        /**\r\n         * Fetches data from Marvel API\r\n         * on comics containig specific character by his unique id.\r\n         * Throws error in case of invalid id.\r\n         * Returns array with comics with transformed data\r\n         * on each comics.\r\n         */\r\n        if (id.toString().length < 7) {\r\n            throw new Error('Invalid id of a character');\r\n        }\r\n        const response = await request(\r\n            _apiUrls.singleCharacter \r\n            + id \r\n            + \"/comics?\" \r\n            + _apiKeyBase \r\n            + publicApiKey\r\n            );\r\n            \r\n        return response.data.results.map(_transformComicsData);\r\n    }\r\n\r\n    const _transformCharacterData = (character) => {\r\n        /**\r\n         * Receives character data object (formed by Marvel API) \r\n         * and returns object with transformed character data \r\n         */\r\n\r\n        /* Validation of character description */\r\n        const noDescriptionMessage = `\r\n            Please visit Homepage or Wiki for detailed description of ${character.name}\r\n            `;\r\n        let description = character.description || noDescriptionMessage;\r\n\r\n        if (description.length >= 235) {\r\n            description = description.slice(0, 235) + \"...\";\r\n        }\r\n\r\n        return {\r\n            id: character.id,\r\n            name: character.name,\r\n            description: description,\r\n            thumbnail: character.thumbnail.path + \".\" + character.thumbnail.extension,\r\n            homepage: character.urls[0].url,\r\n            wiki: character.urls[1].url\r\n        }\r\n    }\r\n\r\n    const _transformComicsData = (comics) => {\r\n        /**\r\n         * Receives comics data object (formed by Marvel API) \r\n         * and returns object with transformed data \r\n         */\r\n\r\n        /* Price validation */\r\n        const price = comics.prices[0].price ? `${comics.prices[0].price}$` : \"Price Not Available\";\r\n\r\n        /* Pages validation */\r\n        const pages = comics.pageCount ? `${comics.pageCount} pages` : \"Unknown number of pages\";\r\n\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'No description available',\r\n            price: price,\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            pages: pages,\r\n            language: comics.textObjects.language || 'en-US'\r\n        }\r\n    }\r\n\r\n    return {\r\n        _baseCharactersLimit,\r\n        _baseCharactersOffset,\r\n        _baseComicsLimit,\r\n        loaded, \r\n        error, \r\n        errorMessage, \r\n        clearError, \r\n        getAllCharacters, \r\n        getCharacter,\r\n        getAllComics,\r\n        getSingleComics,\r\n        getCharacterComics\r\n        };\r\n}\r\n\r\nexport default useMarvelAPIService;","import {Component} from 'react';\r\n\r\nimport ErrorView from '../error-view/error-view';\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false,\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({\r\n            error: true\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorView message=\"Something went wrong. Please try again later\" />\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/Avengers.c29e0ef0.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9b944f71.png\";","import './app-banner.scss';\r\n\r\nimport avengers from '../../static/img/Avengers.png';\r\nimport logo from '../../static/img/Avengers_logo.png';\r\n\r\nconst AppBanner = () => {\r\n    return (\r\n        <div className=\"banner\">\r\n            <div className=\"banner__image\">\r\n                <img src={avengers} alt=\"Avengers\"/>\r\n            </div>\r\n\r\n            <div className=\"banner__text\">\r\n                <p>New comics every week!</p>\r\n                <p>Stay tuned!</p>\r\n            </div>\r\n\r\n            <div className=\"banner__image\">\r\n                <img src={logo} alt=\"Avengers Logo\"/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppBanner;","import { Link } from 'react-router-dom';\r\n\r\nimport './comics-card.scss';\r\n\r\nconst ComicsCard = (props) => {\r\n    const {id, title, price, image} = props;\r\n\r\n    /* Change styles for a \"not found\" image */\r\n    const imageNotFound = \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\";\r\n    let imageClassNames = \"comics-card__image\";\r\n    if (image === imageNotFound) {\r\n        imageClassNames += \" comics-card__image_fill\";\r\n    }\r\n\r\n    return (\r\n        <li \r\n            className='comics-card'\r\n            tabIndex=\"0\"\r\n            id={id}\r\n        >\r\n            <Link to={`/marvel-wiki-portal/comics/${id}`}>\r\n                <div className={imageClassNames}>\r\n                    <img src={image} alt={`Cover of ${title} comics`} />\r\n                </div>\r\n\r\n                <div className=\"comics-card__details\">\r\n                    <h3 className=\"comics-card__title\">{title}</h3>\r\n                    <span className=\"comics-card__price\">{price}</span>\r\n                </div>\r\n            </Link>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default ComicsCard;","import {useState, useEffect} from 'react';\r\n\r\nimport useMarvelAPIService from '../../services/marvel-api-service';\r\nimport useConditionalRender from '../../hooks/conditional-render';\r\n\r\nimport ComicsCard from '../comics-card/comics-card';\r\n\r\nimport './comics-list.scss';\r\n\r\nconst mapToComicsCards = (comics) => {\r\n    /**\r\n     * Helper function for ComicsList component.\r\n     * Receives comics array and maps it to\r\n     * ComicsCard components.\r\n     */\r\n    if (!comics) {\r\n        return null;\r\n    }\r\n\r\n    /* Mapping comics to ComicsCard components */\r\n    return comics.map( ({id, title, price, thumbnail}, i) => {\r\n        return <ComicsCard \r\n                    key={i} \r\n                    id={id}\r\n                    title={title} \r\n                    image={thumbnail}\r\n                    price={price}\r\n                />;\r\n    });\r\n}\r\n\r\nconst ComicsList = () => {\r\n    /* Initializing instances to communicate with Marvel API */\r\n    const marvelService = useMarvelAPIService();\r\n    const comicsPerLoad = marvelService._baseComicsLimit;\r\n    const {loaded, error, errorMessage, newItemsLoading, clearError, getAllComics} = marvelService;\r\n    /* Component states */\r\n    const [comics, setComics] = useState([]);\r\n    const [comicsEnded, setComicsEnded] = useState(false);\r\n    const [offset, setOffset] = useState(0);\r\n\r\n    /* Component logic */\r\n    useEffect(() => {\r\n        onLoadComics();\r\n    }, []);\r\n\r\n    const onComicsLoaded = (newComics) => {\r\n        /**\r\n         * Saves newly uploaded comics data \r\n         * to the state of this component.\r\n         * And updates offset for following uploads.\r\n         */ \r\n\r\n        /* No \"load more\" button if characters ended */\r\n        let ended = false;\r\n        if (newComics.length < comicsPerLoad) {\r\n            ended = true;\r\n        }\r\n        \r\n        setComics(comics => [...comics, ...newComics]);\r\n        setComicsEnded(ended);\r\n        setOffset(offset => offset + comicsPerLoad);       \r\n    }\r\n\r\n    const onLoadComics = (offset) => {\r\n        /**\r\n         * Gets data (array) from Marvel API on additional\r\n         * 8 comics and saves it to the state \r\n         * of this component.\r\n         */\r\n        clearError();\r\n\r\n        getAllComics(offset)\r\n            .then(onComicsLoaded);\r\n    }\r\n\r\n    /* Rendering */\r\n    const content = mapToComicsCards(comics);\r\n    const contentView = useConditionalRender(error, errorMessage, loaded, content, true, \"column\");\r\n\r\n    return (\r\n        <div className=\"comics-section\">\r\n            <ul className=\"comics-section__list\">\r\n                {contentView}\r\n            </ul>\r\n\r\n            <button \r\n                className=\"app-button app-button_main app-button_wide\"\r\n                disabled={newItemsLoading}\r\n                style={{'display': comicsEnded ? 'none' : 'block'}}\r\n                onClick={() => onLoadComics(offset)}\r\n                >\r\n                    Load More\r\n            </button>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default ComicsList;","import AppBanner from '../app-banner/app-banner';\r\nimport ComicsList from '../comics-list/comics-list';\r\nimport ErrorBoundary from '../error-boundary/error-boundary';\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <AppBanner/>\r\n            <ErrorBoundary>\r\n                <ComicsList />\r\n            </ErrorBoundary>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ComicsPage;"],"sourceRoot":""}